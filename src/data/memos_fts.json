[{"id":"1.md","slug":"1","body":"\n- [Rethinking the JavaScript ternary operator](https://jrsinclair.com/articles/2021/rethinking-the-javascript-ternary-operator/)[^1-1]\n- [Break a forEach Loop with JavaScript](https://davidwalsh.name/javascript-array-tricks-3)[^1-2]\n- [You Can Label a JavaScript `if` Statement | CSS-Tricks](https://css-tricks.com/you-can-label-a-javascript-if-statement/)[^1-3]\n- [Refactoring optional chaining into a large codebase: lessons learned – Lea Verou](https://lea.verou.me/2020/06/refactoring-optional-chaining-into-a-large-codebase-lessons-learned/)[^1-4]\n- [[HTML5] 꼼꼼히 살펴보는 SCRIPT 엘리먼트 - 코드쓰는사람](https://taegon.kim/archives/6804)[^1-6]\n- [Single Page Applications using Rust](https://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/)[^1-5]\n- [Fast and maintainable patterns for fetching from a database – Sophie Alpert](https://sophiebits.com/2020/01/01/fast-maintainable-db-patterns.html)[^1-7]\n- [Deep-copying in JavaScript using structuredClone](https://web.dev/structured-clone/)[^1-8]\n- [Holistic Review of TC39 \"Dataflow\" Proposals — Tab Completion](https://www.xanthir.com/b5Gd0)[^1-9]\n\n---\n\n[^1-1]: __삼항연산자__(ternary)의 어두운면과 우려를 나타내는 글\n[^1-2]: `forEach` 루프 `break`하는 트릭. 참조하는 배열의 length값을 0으로.\n[^1-3]: 조건문에서 [`label`](https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/label)을 지정해서 해당 블록으로 `break`가 가능하다는걸 보여주는 내용. 실제 적용할만한 사례는 거의 없고 글쓴이는 while+switch문에서 break를 좀 더 효율적으로 사용한 예를 보여주고 있다.\n[^1-4]: [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining) 문법으로 리팩토링 하면서...변경 가능한 부분(삼항연산자, 배열, 기능탐지)과 주의사항(값 할당, 잘못된 위치에 표기), 조심할 부분(null/undefined, 연산 순서와 순위, return 항상 호출됨)으로 구분해서 정리한 글. 커밋을 보면 실제로 어떻게 작업했는지 확인도 가능하다.\n[^1-5]: rust로 작성하고 wasm으로 컴파일해서 클라이언트 프로그램을 작성하는 방법을 자세하게 설명하고 있다. rust에 관심이 있거나 하다면 볼만한 글.\n[^1-6]: `<script />` 태그와 속성값에 대한 정리\n[^1-7]: 종속성 구조를 파악해서 최적의 병렬화로 빠르게 데이터 가져오기\n[^1-8]: `structuredClone()`\n[^1-9]: pipe, flow 제안(초안)사항을 검토하는 관점에서 보는 시각","collection":"memo","data":{"tags":["javascript","bookmarks"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"101.md","slug":"101","body":"\n```\n# 마지막 커밋 해시\ngit log --pretty=format:'%h' -n 1\n```\n\n```\n# 유저정보\ngit config user.name\ngit config user.email\n```","collection":"memo","data":{"tags":["git"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"105.md","slug":"105","body":"\n[discard](https://stackoverflow.com/questions/52704/how-do-i-discard-unstaged-changes-in-git)[^105-1]\n\n```\ngit checkout -- ./index.js\n```\n\n리모트 브랜치 가져오기\n\n```\ngit remote update\n```\n\n---\n\n[^105-1]: 명령어로 discard를 하려면","collection":"memo","data":{"tags":["git"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"107.md","slug":"107","body":"\n인라인 요소에 `bold` 스타일이 적용될 경우 레이아웃 시프팅 현상이 발생하기 때문에 해당 이슈를 해결하는 방법들.\n\n- [html - Inline elements shifting when made bold on hover - Stack Overflow](https://stackoverflow.com/a/20249560)[^107-1]\n- [Bold on Hover... Without the Layout Shift | CSS-Tricks](https://css-tricks.com/bold-on-hover-without-the-layout-shift/)[^107-2]\n\n---\n\n[^107-1]: `text-shadow`로 우회하는 방법이 주 해결방법으로 올라왔다.\n[^107-2]: `content` 속성과, `grid` 레이아웃을 이용한 방법.","collection":"memo","data":{"tags":["css","layout shift","bold"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"108.md","slug":"108","body":"\n- [Using Flexbox and text ellipsis together · Leonardo Faria](https://leonardofaria.net/2020/07/18/using-flexbox-and-text-ellipsis-together/)[^108-1]\n- [Multiline truncated text with \"show more\" button (with just CSS) - Paul Bakaus' blog](https://paulbakaus.com/tutorials/css/multiline-truncated-text-with-show-more-button-with-just-css/)[^108-2]\n\n---\n\n[^108-1]: flexbox | 파일명에 ellipsis 효과 적용, 단 파일 확장자는 제외한다.\n[^108-2]: :truncated 개념이 없기 때문에 스크립트로 ResizeObserver와 영역값을 체크해서 구현한 내용.","collection":"memo","data":{"tags":["css","ellipsis"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"122.md","slug":"122","body":"\n- [Tilted Angles in Sass - SitePoint](https://www.sitepoint.com/tilted-angles-in-sass/)\n- [Inverse trigonometric functions with Sass – TheSassWay.com](http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass)\n\n```js\nfunction getTiltedHeight(angle) {\n  const a = 100;\n  const A = 90 - angle;\n  \n  const c = a / Math.sin(Math.PI * A / 180);\n  const b = Math.sqrt(Math.pow(c, 2) - Math.pow(a, 2));\n  \n  return `${Math.abs(b)}%`;\n}\n```","collection":"memo","data":{"tags":["angle","math"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"124.md","slug":"124","body":"\n[TIL — The power of JSON.stringify replacer parameter | pawelgrzybek.com](https://pawelgrzybek.com/til-the-power-of-json-stringify-replacer-parameter/)\n\n```js\nJSON.stringify(dude, (key, value) =>\n  value instanceof Set ? [...value] : value\n);\nJSON.stringify(dude, null, \"🍆\");\n```","collection":"memo","data":{"tags":["json"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"128.md","slug":"128","body":"\n매니페스트 V3로 마이그레이션[^128-1]\n\n- host_permissions으로 분리\n- action으로 통합(두군데 수정이 필요하다)\n\n[^128-1]: https://github.com/cbcruk/webext/commit/cbb36355871fb36d5f6c21752aae3400d2a97abf#diff-0f354ef5fd807996fa3f5a7a83ceb74025aa8f85862e321b8938988031e99711L3-L25","collection":"memo","data":{"tags":["extensions"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"132.md","slug":"132","body":"\n디자인 된 `<select />`에  `placeholder` 개념이 있어서 어떻게 하면 좋을지 찾아봤다. 간략하게 설명하자면 선택이 불가능하게 `disabled` 추가하고 `hidden`으로 숨김 마지막으로 `selected`로 디폴트값을 처리하면 완성.\n\n```js\nfunction Select({ placeholder, children }) {\n  return (\n    <select>\n      <option value=\"\" disabled hidden selected>\n        {placeholder}\n      </option>\n      {children}\n    </select>\n  );\n}\n```\n\n---\n\n- [How do I make a placeholder for a 'select' box?](https://stackoverflow.com/questions/5805059/how-do-i-make-a-placeholder-for-a-select-box)\n","collection":"memo","data":{"tags":["html","select"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"133.md","slug":"133","body":"\n[Building a multi-select component](https://web.dev/building-a-multi-select-component/)\n\n다중 선택 UI를 구현하기위해서 checkbox, select 두가지 방법으로 작업하는 방식을 소개하고 있다. 그외 선택된 상태값을 얻기위한 `counter()` 함수, 모바일 체크를 위한 미디어쿼리도 알려주고 있다.\n\n```css\naside {\n  counter-reset: filters;\n\n  & :checked {\n    counter-increment: filters; \n  }\n\n  &::after {\n    content: counter(filters);\n  }\n}\n```\n```css\n@media (pointer: coarse) {\n  // \n}\n```","collection":"memo","data":{"tags":["select","css","ui"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://stackblitz.com/edit/react-ts-fyggsu?file=index.tsx"}},{"id":"134.md","slug":"134","body":"\n[Under-Engineered Select Menus | Adrian Roselli](https://adrianroselli.com/2021/03/under-engineered-select-menus.html)\n\n- `font`, `letter-spacing`, `word-spacing` 상속\n- `appearance` 화살표 수정\n- 상태(focus, required, invalid)에 따른 스타일 추가","collection":"memo","data":{"tags":["select","css"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"143.md","slug":"143","body":"\nhtml\n\n`<head />`\n\n- [🤯 HEAD - A simple guide to HTML `<head>` elements](https://htmlhead.dev/)\n\n구조화된 데이터\n\n- [Using Structured Data to Enhance Search Engine Optimization | CSS-Tricks](https://css-tricks.com/using-structured-data-to-enhance-search-engine-optimization/)\n- [Understand How Structured Data Works | Google Search Central](https://developers.google.com/search/docs/advanced/structured-data/intro-structured-data)\n\n`lang`\n\n- [The lang attribute: browsers telling lies, telling sweet little lies - Manuel Matuzović](https://www.matuzo.at/blog/lang-attribute/)\n\nfavicon\n\n- [How to Favicon in 2021: Six files that fit most needs — Martian Chronicles, Evil Martians’ team blog](https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs)\n- [How to Create a Favicon That Changes Automatically | CSS-Tricks](https://css-tricks.com/how-to-create-a-favicon-that-changes-automatically/)\n- [Emojis as Favicons | CSS-Tricks](https://css-tricks.com/emojis-as-favicons/)\n- [We Analyzed 425,909 Favicons • iconmap.io](https://iconmap.io/blog)[^143-1]\n\n---\n\n[^143-1]: 다양한 관점에서 파비콘을 분석한 글","collection":"memo","data":{"tags":["html","favicon"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"146.md","slug":"146","body":"\n```\n# 개발할때 편하다\nyarn add -D @types/cypress\n```\n\n```js\n// react-devtools 같은 확장도구가 필요할 경우\n\n// /plugins/index.js\nconst path = require('path')\n\nmodule.exports = (on, _config) => {\n  on('before:browser:launch', (browser, launchOptions) => {\n    if (browser.family === 'chromium') {\n      const extensionFolder = path.resolve(__dirname, '..', '..', '4.7.0_1')\n\n      launchOptions.args.push(`--load-extension=${extensionFolder}`)\n\n      return launchOptions\n    }\n  })\n}\n\n// /support/commands.js\nCypress.on('window:before:load', (win) => {\n  win.__REACT_DEVTOOLS_GLOBAL_HOOK__ = window.top.__REACT_DEVTOOLS_GLOBAL_HOOK__\n})\n```\n\n```js\n// 파일업로드 기능 테스트\nCypress.Commands.add(\n  'uploadFile',\n  { prevSubject: true },\n  (subject, fileName) => {\n    cy.fixture(fileName).then((content) => {\n      const el = subject[0]\n      const testFile = new File([content], fileName)\n      const dataTransfer = new DataTransfer()\n\n      dataTransfer.items.add(testFile)\n      el.files = dataTransfer.files\n      cy.wrap(subject).trigger('change', { force: true })\n    })\n  }\n)\n```\n\n```js\n// 에러때문에 테스트가 끊길 경우\nCypress.on('uncaught:exception', (err, runnable) => {\n  console.log(err)\n  return false\n})\n```","collection":"memo","data":{"tags":["test","cypress"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"147.md","slug":"147","body":"\n테스트 하다가 특정 사이즈 파일이 필요한 경우. 순수하게 사이즈 관련된 내용만 테스트가 가능하다.[^147-1]\n\n```bash\nmkfile 100m some100mfile.pdf\n```\n\n---\n\n[^147-1]: [How to create large PDF files (10MB, 50MB, 100MB, 200MB, 500MB, 1GB, etc.) for testing purposes? - Stack Overflow](https://stackoverflow.com/questions/5092518/how-to-create-large-pdf-files-10mb-50mb-100mb-200mb-500mb-1gb-etc-for-t)","collection":"memo","data":{"tags":["test"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"148.md","slug":"148","body":"\n테스트 코드에서 mock으로 처리하는 경우[^148-1]\n\n- [Mocking React custom hook with Jest - Stack Overflow](https://stackoverflow.com/questions/65270255/mocking-react-custom-hook-with-jest)\n- [mrbenhowl/mocking-firebase-initializeApp-and-firebase-auth-using-jest](https://github.com/mrbenhowl/mocking-firebase-initializeApp-and-firebase-auth-using-jest)\n- [Avoid Nesting when you're Testing](https://kentcdodds.com/blog/avoid-nesting-when-youre-testing)\n\n---\n\n[^148-1]: 그래서 내가 내린 결론은 저렇게 까지는 테스트할 필요가 없고 오히려 애매하게 결합된 컴포넌트들을 분리해서 관리하는게 맞을 것 같다는 생각을 해봤다.","collection":"memo","data":{"tags":["mock","test"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"149.md","slug":"149","body":"\n```\n**title**: 반품 및 교환은 재고로 이동합니다.\n\n**as a** 가게 주인으로서,\n**I want** 반품 또는 교환 시 상품을 재고에 다시 추가하고 싶습니다.\n**so that** 인벤토리를 추적할 수 있습니다.\n\n**Scenario 1:** 환불을 위해 반품된 항목은 인벤토리에 추가되어야 합니다.\n**Given** 고객이 이전에 나에게서 검은색 스웨터를 구매했다는 점을 감안할 때\n**and** 인벤토리에 검은색 스웨터 3개가 있습니다.\n**when** 환불을 위해 검은색 스웨터를 반환할 때\n**then** 그러면 인벤토리에 4개의 검은색 스웨터가 있어야 합니다.\n```\n\nFeature > [...Scenario] > [...Step]\n\n- `Given`: Given단계는 시스템의 초기 컨텍스트( 시나리오 장면) 를 설명하는 데 사용됩니다 . 그것은 일반적으로 과거에 일어난 일입니다.\n- `When`: When단계는 이벤트 또는 작업 을 설명하는 데 사용됩니다 . 이것은 시스템과 상호 작용하는 사람이거나 다른 시스템에 의해 트리거되는 이벤트일 수 있습니다.\n- `Then`: Then단계는 예상되는 결과 또는 결과 를 설명하는 데 사용됩니다 .\n- `And`, `But`\n\n```\nScenario: 항목 검색 후 결제 페이지로 이동\n   Given 사용자가 Greencart 방문 페이지에 있다\n   When 사용자가 야채<이름>를 검색했을 때\n   And 장바구니에 항목이 추가된다\n   And 사용자는 구매를 위해 Checkout 페이지로 이동한다\n   Then 선택한 <이름> 항목이 체크아웃 페이지에 표시된다\n```","collection":"memo","data":{"tags":["test","bdd"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"15.md","slug":"15","body":"\n```ts\ninterface MathFn {\n  (a: number, b: number): number\n}\nconst sum: MathFn = (a, b) => a + b\n```\n\n- [TypeScript Function Syntaxes](https://kentcdodds.com/blog/typescript-function-syntaxes) [(번역)](https://ui.toast.com/weekly-pick/ko_20210521)[^15-1]\n- [Typing functions in TypeScript](https://2ality.com/2020/04/typing-functions-typescript.html)\n\n---\n\n[^15-1]: function declarations, function expressions, arrow functions, methods등 TypeScript에서 함수를 선언하는 다양한 방법들.\n[^15-2]: TypeScript에서 함수를 입력하는 방법에 대한 종합적인 가이드","collection":"memo","data":{"tags":["typescript","function"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"152.md","slug":"152","body":"\nlive2d 구현이 필요할 경우 pixi+plugin을 사용하면 된다\n\n- https://codepen.io/guansss\n- [샘플 데이터 모음 - Live2D Cubism](https://www.live2d.com/ko/download/sample-data/)","collection":"memo","data":{"tags":["live2d"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://codesandbox.io/s/3n1jh"}},{"id":"159.md","slug":"159","body":"\n```js\nimport isAfter from 'date-fns/isAfter';\n\nisAfter(new Date(), new Date(DATE))\n```\n\n날짜 비교 할 일이 있어서 별 생각 없이 `new Date`를 때렸는데 safari에서 안되는 문제가 발견되었다. 콘솔을 확인해보니 _yyyy-MM-dd HH:mm:ss_ 해당 형태의 포멧 에서는 안된다. 평소에 `new Date` 보다는 moment나 date-fns같은 라이브러리를 당연하게 써오다 보니 몰랐다. 그런데 또 다른 생각을 해보자면 저런 문제가 있기 때문에 더 적극적으로 라이브러리를 사용해야 한다는 게 함정.\n\n```js\nimport isAfter from 'date-fns/isAfter';\nimport format from 'date-fns/format';\n\nisAfter(new Date(), format(DATE))\n```\n\n- [Invalid date in safari](https://stackoverflow.com/questions/4310953/invalid-date-in-safari)\n- [Safari Javascript Date() NaN Issue (yyyy-MM-dd HH:mm:ss)](https://stackoverflow.com/questions/21883699/safari-javascript-date-nan-issue-yyyy-mm-dd-hhmmss)","collection":"memo","data":{"tags":["javascript","date"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"160.md","slug":"160","body":"\n[Google Optimize](https://optimize.google.com/)에서 [Redirect 테스트](https://support.google.com/optimize/answer/6361119?hl=ko&ref_topic=6197696)를 진행했는데 기능 구현은 문제없는데 세션수가 안 잡히는 문제가 발생했다. \n\n이번에 문제되었던 부분은 query 처리를 인지하지 못했던 점이었다. Optimize에서 redirect 처리가 이루어질 때 `query`에 정보(예. `utm_expid`)들이 추가되는데 리다이렉트 url 변경하는 부분이 있었고 optimize에서 참조되어야 할 query를 날려버리면서 측정이 불가능했던 것. 결국 `replace` 실행 코드를 이전 query를 assign 시켜주도록 변경해서 해결.\n\n여담이지만 [Charles](https://www.charlesproxy.com/)를 사용하고 있어서 배포 없이 테스트 가능했던 점도 같이 메모.","collection":"memo","data":{"tags":["optimize","charles"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"161.md","slug":"161","body":"\nconnect가 실행된 컴포넌트를 (enzyme) `mount`로 테스트한 경우 실패 케이스가 발생해서 찾아본 내용들 인 것 같은데 정확하게 기억이 안남. `shallow`로 변경했더니 이번에는 ref를 못쓰는 문제도 있었다고 하고...\n여담이지만 컴포넌트를 명확하게 정의하고 분리해서 테스팅 스트레스를 줄이는 게 중요합니다.\n\n- [Enzyme mount test failing with redux store state update](https://stackoverflow.com/questions/58010552/enzyme-mount-test-failing-with-redux-store-state-update)\n- [httpsWhy I Always Use Shallow Rendering](https://hackernoon.com/why-i-always-use-shallow-rendering-a3a50da60942)","collection":"memo","data":{"tags":["test"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"162.md","slug":"162","body":"\nbrew로 ffmpeg 설치할때[^162-1]\n\n```\nbrew install ffmpeg $(brew options ffmpeg | grep -vE '\\s' | grep -- --with-' | tr '\\n' ' ')\n```\n\n---\n\n[^162-1]: [brew install ffmpeg with all options](https://gist.github.com/Piasy/b5dfd5c048eb69d1b91719988c0325d8)","collection":"memo","data":{"tags":["youtube-dl","ffmpeg","brew"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"163.md","slug":"163","body":"\nyoutube-dl 업데이트가 안되면서 다운로드 속도가 굉장히 저조하다. 그래서 [yt-dlp](https://github.com/yt-dlp/yt-dlp)로 일단 변경해서 사용 중.\n\n---\n\n여러 개 주소를 한꺼번에 받으려면 주소를 txt 파일로 저장하고 `-a(-a, --batch-file FILE)` 옵션을 추가하면 된다.\n\n```\nyoutube-dl -a list.txt\n```\n\n---\n\n가끔 중간에 에러가 발생하는 경우도 있는데 이럴 경우 ignore로 방어 코드를 설정하고 실행시키면 잘 된다.\n\n```\nyoutube-dl -i, --ignore-errors\n```\n\n---\n\n자막을 다운로드해야 된다면 --sub-lang 옵션을 추가한다. 자동 자막이 필요하다면 `--write-auto-sub`\n\n```\nyoutube-dl --write-sub --sub-lang ko\nyoutube-dl --write-auto-sub\n```\n\n---\n\nplaylist를 다운 받을때 index도 파일에 포함시키고 싶을 경우[^163-1]\n\n```\n-o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s'\n```\n\n---\n\n기본적으로 평소 사용하는 alias 설정\n\n```\nalias dm=\"youtube-dl\"\nalias da=\"youtube-dl -x --audio-format mp3\"\n```\n\n---\n\n[^163-1]: https://github.com/ytdl-org/youtube-dl#output-template","collection":"memo","data":{"tags":["youtube-dl"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"164.md","slug":"164","body":"\n스트리밍 비디오 다운로드 할 경우 403 에러가 발생할때 해당 옵션으로 우회한다.[^164-1]\n\n```\nyoutube-dl --referer \"URL\" --user-agent \"UA\"\n```\n\n```shell\ndmRef() {\n  youtube-dl $1 --referer $1 --user-agent \"UA\"\n}\n```\n\n---\n\n[^164-1]: https://www.reddit.com/r/youtubedl/comments/g342nr/masterm3u8_http_error_403_forbidden_youtubedl_or/","collection":"memo","data":{"tags":["youtube-dl","zsh"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"166.md","slug":"166","body":"\n```css\n::-webkit-input-placeholder /* for (Chrome/Safari/Opera) */\n:-ms-input-placeholder /* for IE. */\n::-ms-input-placeholder /* for Edge (also supports webkit prefix) */\n\n::-ms-clear {}\n::-ms-reveal {}\n```\n\n---\n\n- [On Edge Browser, how to change input placeholder text color using CSS?](https://stackoverflow.com/questions/32096102/on-edge-browser-how-to-change-input-placeholder-text-color-using-css)","collection":"memo","data":{"tags":["input","css"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"167.md","slug":"167","body":"\n`autocomplete=\"one-time-code\"` 사용자가 SMS 메시지를 수신 할 때마다, 운영 체제는 SMS에서 OTP 구문을 분석하고 키보드는 OTP를 제안합니다. iOS, iPadOS 및 macOS의 Safari 12 이상에서만 작동하지만 해당 플랫폼에서 SMS OTP 환경을 쉽게 개선할 수 있는 방법이므로 사용하는 것이 좋습니다.\n\n```html\n<input \n  type=\"text\"\n  inputmode=\"numeric\"\n  autocomplete=\"one-time-code\"\n  pattern=\"\\d{6}\"\n  required\n/>\n```\n\n```js\nconst otp = await navigator.credentials.get({\n  otp: {\n    transport: ['sms']\n  }\n})\n\ninput.value = otp.code\n```\n\n참고\n\n- [SMS OTP form best practices](https://web.dev/sms-otp-form/)\n- [Apple Developer Documentation](https://developer.apple.com/documentation/security/password_autofill/enabling_password_autofill_on_an_html_input_element)\n- [HTML attributes to improve your users' two factor authentication experience](https://www.twilio.com/blog/html-attributes-two-factor-authentication-autocomplete)","collection":"memo","data":{"tags":["input","otp"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"168.md","slug":"168","body":"\n자동완성 기능은 편리할수도 있지만 비활성화가 필요한 경우도 있다. 하지만 chrome에서 무시되는 경우가 있는데...이게 거의  된다 지금은 안된다...되는 것 같다...이렇게 변질이 되는 것 같다.\n\n- [html - Disabling Chrome Autofill - Stack Overflow](https://stackoverflow.com/questions/15738259/disabling-chrome-autofill)[^168-1]\n- [Disabling autofill in Chrome | Codementor](https://www.codementor.io/@leonardofaria/disabling-autofill-in-chrome-zec47xcui)[^168-2]\n- [How to turn off form autocompletion - Web security | MDN](https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion)\n- [The Autofill Dark Pattern — Smashing Magazine](https://www.smashingmagazine.com/2021/10/autofill-dark-pattern/)\n\n---\n\n[^168-1]: 가끔 들어가보면 여전히 진행중이다...\n[^168-2]: 글쓴이는 결국 안되서 스크립트로 focus될때 `readonly` 속성으로 제어했다고 한다.","collection":"memo","data":{"tags":["autofill","html"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"172.md","slug":"172","body":"\n- [5 steps to faster web fonts /// Iain Bean](https://iainbean.com/posts/2021/5-steps-to-faster-web-fonts/)\n- [How to Stop Lighthouse Complaining About Render Blocking Google Fonts | Codeboosh](https://codeboosh.com/how-to-stop-lighthouse-complaining-about-render-blocking-google-fonts/)\n- [A Comprehensive Guide to Font Loading Strategies—zachleat.com](https://www.zachleat.com/web/comprehensive-webfonts/)\n- [How to avoid layout shifts caused by web fonts – Simon Hearne](https://simonhearne.com/2021/layout-shifts-webfonts/)\n- [The Fastest Google Fonts – CSS Wizardry – Web Performance Optimisation](https://csswizardry.com/2020/05/the-fastest-google-fonts/)\n- [Time to Say Goodbye to Google Fonts](https://wicki.io/posts/2020-11-goodbye-google-fonts/)\n- [The Best Font Loading Strategies and How to Execute Them | CSS-Tricks](https://css-tricks.com/the-best-font-loading-strategies-and-how-to-execute-them/)\n\n요약하자면\n\n- woff2\n- font-display로 레이아웃 이슈 최소화\n- preload\n- self (feat. [google webfonts helper](https://google-webfonts-helper.herokuapp.com/fonts))\n\n몇몇 권장사항은 한글 폰트에서는 사실상 불가능한 부분이라 가능한 부분들을 [적용](https://github.com/cbcruk/zitat/commit/8587c7f9669ad5b97facec9c4b2c918d7cb300ef)하면 된다.","collection":"memo","data":{"tags":["font"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"173.md","slug":"173","body":"\n가변 글꼴은 진보된 OpenType 사양입니다. CSS를 사용할때 가짜 굵기 또는 기울임꼴과 같은 브라우저 왜곡 에 대해 걱정하지 않고 단일 글꼴 파일에 포함된 모든 스타일에 액세스할 수 있습니다.\n\n이전에는 여러 스타일을 사용한다는 것은 모든 너비, 두께 또는 기울임꼴에 대해 하나씩 여러 파일을 로드하는 것을 의미했습니다. 이로 인해 디자인 표현력(사용된 글꼴 수)과 웹사이트 성능(다운로드할 데이터의 양) 사이에 긴장감이 생겼습니다. 가변 글꼴을 사용하면 전체 방정식이 변경됩니다.\n\n- [A Variable Fonts Primer](https://variablefonts.io/)\n- [Google Fonts](https://fonts.google.com/specimen/Hahmlet?vfonly=true&subset=korean#standard-styles)\n- [Getting the Most Out of Variable Fonts on Google Fonts | CSS-Tricks](https://css-tricks.com/getting-the-most-out-of-variable-fonts-on-google-fonts/)\n- [Variable Fonts for Developers](https://variablefonts.dev/)\n- [Using CSS Custom Properties to Adjust Variable Font Weights in Dark Mode | CSS-Tricks](https://css-tricks.com/using-css-custom-properties-to-adjust-variable-font-weights-in-dark-mode/)[^173-1]\n\n---\n\n[^173-1]: 다크모드에서 weight가 시각적으로 차이가 날수 있기때문에 그럴경우 변수로 분리해서 대응하는 방법","collection":"memo","data":{"tags":["font"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://codepen.io/eunsoolee/pen/vYZqoGz"}},{"id":"183.md","slug":"183","body":"\n[GitHub - meltingice/psd.js: A Photoshop PSD file parser for NodeJS and browsers](https://github.com/meltingice/psd.js)\n\npsd 파서. 이를 통해 관리 가능한 트리 구조에서 Photoshop 문서로 작업하고 다음과 같은 중요한 데이터를 찾을 수 있습니다.\n\n- 문서 구조\n- 문서 크기\n- 레이어/폴더 크기 + 위치 지정\n- 레이어/폴더 이름\n- 레이어/폴더 가시성 및 불투명도\n- 글꼴 데이터( psd-enginedata 를 통해 )\n  - 텍스트 영역 내용\n  - 글꼴 이름, 크기 및 색상\n- 색상 모드 및 비트 심도\n- 벡터 마스크 데이터\n- 병합된 이미지 데이터\n- 레이어 구성 요소","collection":"memo","data":{"tags":["photoshop"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"187.md","slug":"187","body":"\n[blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob#parameters)\n\n```js\nnew Blob(array, { type : 'text/html' })\n```\n\n파일 다운로드 생성이 잘 안되서 확인해보니 `type` 지정을 안했다.","collection":"memo","data":{"tags":["blob"],"status":"release","ctime":"2022-05-29T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"189.md","slug":"189","body":"\n```\n# .gitignore가 규칙이 적용되지 않을때\ngit rm -rf --cached .\ngit add .\n```\n\n---\n\n- https://stackoverflow.com/questions/25436312/gitignore-not-working","collection":"memo","data":{"tags":["git"],"status":"release","ctime":"2022-06-18T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"19.md","slug":"19","body":"\n계산기 응용 프로그램의 다양한 측면을 설명합니다.\n\n- [The creation of Soulver. How two teenagers made a new kind of… | by Zac Cohan | Soulver | Medium](https://medium.com/soulver/the-creation-of-soulver-454dee1e2fd1)[^19-1]\n- [Designing calculator apps](https://fvsch.com/calculators)[^19-2]\n- [Numi. Beautiful calculator app for Mac.](https://numi.app/)[^19-3]\n- [Parsify Desktop](https://parsify.app/)[^19-4]\n- [Math Notepad](https://mathnotepad.com/)[^19-5]\n\n---\n\n[^19-1]: 사용자가 평범한 문장을 사용하여 계산을 수행할 수 있는 고유한 인터페이스가 있는 계산기 응용 프로그램인 Soulver를 만든 방법을 알려주는 내용. 제작자가 직면한 어려움과 Soulver를 돋보이게 하는 기능에 대해 설명합니다.\n[^19-2]: 계산기 응용 프로그램의 설계 원칙에 대해 설명합니다. 다양한 유형의 계산기와 사용자 친화적인 계산기 앱을 만드는 핵심 디자인 요소에 대한 자신의 생각을 공유합니다.\n[^19-3]: 자연어 인터페이스와 단위 환산, 통화 환산, 계산 내역과 같은 고급 기능을 제공하는 Mac용 계산기 애플리케이션인 Numi의 웹사이트. Numi의 기능 및 가격에 대한 정보가 포함.\n[^19-4]: Parsify Desktop은 엔지니어, 과학자 및 학생이 사용하도록 설계되었으며 복잡한 계산 및 단위 변환을 지원합니다. (자연어 인터페이스도 제공)\n[^19-5]: [math.js](https://mathjs.org/)\n","collection":"memo","data":{"tags":["ui","calculator","math"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-05-15T00:00:00.000Z"}},{"id":"191.md","slug":"191","body":"\n```js\nconst obj = {\n  a: 1,\n  b: 2,\n}\n\nconsole.log(obj[['a']]) // 1\nconsole.log(obj[['b']]) // 2\n```\n\n이게 되네 🤔","collection":"memo","data":{"tags":["javascript","bug"],"status":"release","ctime":"2022-09-18T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"193.md","slug":"193","body":"\n```js\n<div\n  dangerouslySetInnerHTML={{\n    __html: `\n      <img src=\"http://unsplash.it/100/100?random\" onload=\"console.log('you got hacked');\" />\n    `,\n  }}\n/>\n```\n\n가끔 아주 가끔 이상한 일을 해야할때가 있는데 그럴때는 이렇게 하면 된다.","collection":"memo","data":{"tags":["react","hack"],"status":"release","ctime":"2022-09-18T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://stackblitz.com/edit/react-ts-dyuyny?file=App.tsx"}},{"id":"197.md","slug":"197","body":"\n- [https://twitter.com/youyuxi/status/1362050255009816577](https://twitter.com/youyuxi/status/1362050255009816577)[^197-1]\n- [How to use `.js` instead of `.jsx`](https://github.com/vitejs/vite/discussions/3448)[^197-2]\n  - [How do you move multiple files in git? - Stack Overflow](https://stackoverflow.com/questions/2212857/how-do-you-move-multiple-files-in-git)\n\n```shell\n# 아마도 git을 사용하고 있을테니까 `git mv`를 사용해서 변경해주자\nfind src -type f | grep \"\\.[jt]s$\" | xargs -n1 grep -HE \"^[^*\\n]*(<\\/?[a-zA-Z]*>)[\\s\\w]*$\" | cut -d: -f1 | uniq | awk '{print \"git mv \"$1\" \"$1\"x\"}' | sh\n```\n\n---\n\n[^197-1]: Vite가 JSX 처리를 위해 .jsx 확장자를 요구하는 이유는 대부분의 경우 일반 .js 파일이 브라우저에서 작동하기 위해 전체 AST 변환이 필요하지 않아야 하기 때문입니다. .js 파일에서 JSX를 허용한다는 것은 제공되는 모든 파일이 JSX를 포함하는 경우에 대비하여 전체 AST 처리되어야 함을 의미합니다.\n[^197-2]: [`.jsx`](https://github.com/vitejs/vite/discussions/3448#discussioncomment-1859773) 또는 [`.js`](https://github.com/vitejs/vite/discussions/3448#discussioncomment-749919)를 사용해야할 경우에 대한 답변들이 소개되어 있다.\n","collection":"memo","data":{"tags":["vite"],"status":"release","ctime":"2022-09-19T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"199.md","slug":"199","body":"\n[chromatic](https://www.chromatic.com/)\n\n- [Chromatic Storybook - Secure you project token in Next.js](https://www.sabbaticaldev.co.uk/post/chromatic-storybook)[^199-1]\n\n---\n\n[^199-1]: cli를 사용할 경우 `CHROMATIC_PROJECT_TOKEN`을 `.env`에서 관리하면 된다","collection":"memo","data":{"tags":["storybook","chromatic"],"status":"release","ctime":"2022-09-23T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"200.md","slug":"200","body":"\n```\n// cannot be used as a JSX component\n```\n\n`@types/react`, `@types/react-dom`에 대한 참조가 잘못되면서 발생하는 이슈\n\n---\n\n- [【React, TypeScript】「cannot be used as a JSX component...」エラー - Qiita](https://qiita.com/ayaka105/items/2cee20f99bf45aadffda)\n- [javascript - 'Component' cannot be used as a JSX component. Nextjs - Stack Overflow](https://stackoverflow.com/questions/71974065/component-cannot-be-used-as-a-jsx-component-nextjs)\n- [Component cannot be used as a JSX component in React | bobbyhadz](https://bobbyhadz.com/blog/react-cannot-be-used-as-a-jsx-component)","collection":"memo","data":{"tags":["react"],"status":"release","ctime":"2022-09-23T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"202.md","slug":"202","body":"\n```\ngit remote add {alias} {url}\ngit fetch {alias}\ngit merge --allow-unrelated-histories {alias}/{branch}\n```\n\n---\n\n- [[git] 서로 다른 repository 합치기 — Falcon](https://m-falcon.tistory.com/522)\n- [How do you merge two Git repositories? - Stack Overflow](https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories)\n- [How to merge git repositories preserving git history - JDriven Blog](https://blog.jdriven.com/2021/04/how-to-merge-multiple-git-repositories/)\n- [Git - git-mv Documentation](https://git-scm.com/docs/git-mv)\n- [Merging two GitHub repositories without losing commit history - Mozilla Hacks - the Web developer blog](https://hacks.mozilla.org/2022/08/merging-two-github-repositories-without-losing-commit-history/)","collection":"memo","data":{"tags":["git"],"status":"release","ctime":"2022-11-03T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"203.md","slug":"203","body":"\n- [React + Webpack: ChunkLoadError: Loading chunk X failed. | by Raphaël Léger | Medium](https://raphael-leger.medium.com/react-webpack-chunkloaderror-loading-chunk-x-failed-ac385bd110e0)\n- [How to fix ChunkLoadError in your ReactJS application - Codemzy's Blog](https://www.codemzy.com/blog/fix-chunkloaderror-react)\n\n---\n\n`lazy`로 `import`했을 경우 *ChunkLoadError*가 발생하는데 이럴 경우 어떻게 대응할 수 있는지 정리해둔 글들.","collection":"memo","data":{"tags":["react"],"status":"release","ctime":"2022-09-23T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"207.md","slug":"207","body":"\n- [Check whether user has a Chrome extension installed](https://stackoverflow.com/questions/6293498/check-whether-user-has-a-chrome-extension-installed) 특정 확장도구가 설치되어 있는지 판별하는 방법\n\n```\n# 크롬 익스텐션이 설치되는 경로는 다음과 같다\n/Users/USERNAME/Library/Application Support/Google/Chrome/Default/Extensions\n```\n\n```js\nfunction isInstalled(extensionId) {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    \n    img.src = `chrome-extension://${extensionId}/icon-128.png` // 해당 리소스가 `web_accessible_resources`에 선언되어 있는지 확인이 필요하다.\n    img.onload = () => { resolve(true) }\n    img.onerror = () => { reject() }\n  })\n}\n```","collection":"memo","data":{"tags":["extensions"],"status":"release","ctime":"2022-09-24T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"208.md","slug":"208","body":"\nLambda@Edge (Node) 함수 작성 시 npm module을 사용하는 방법. **esbuild**를 사용하면 편하다.\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"esbuild --bundle --minify --platform=node --target=node12 --outdir=build main.js\",\n    \"export\": \"cd build && zip main.js.zip main.js\"\n  }\n}\n```\n\n---\n\n- [amazon web services - How to load npm modules in AWS Lambda? - Stack Overflow](https://stackoverflow.com/questions/34437900/how-to-load-npm-modules-in-aws-lambda)\n- [함수를 사용하여 엣지에서 사용자 지정 - Amazon CloudFront](https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html)","collection":"memo","data":{"tags":["aws"],"status":"release","ctime":"2022-09-25T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"209.md","slug":"209","body":"\n[Clear CloudFront Cache with AWS CLI | bobbyhadz](https://bobbyhadz.com/blog/aws-cli-clear-cloudfront-cache#clearing-cloudfront-cache-for-the-entire-distribution)\n\n```js\n/**\n * CloudFront 배포에 대한 캐시를 무효화하려면 경로와 함께 명령을 실행합니다\n * \n * @param {object} params\n * @param {string} params.distributionId\n * @param {string} params.paths\n * @returns {CreateInvalidationResult}\n */\nfunction createInvalidation({\n  distributionId,\n  paths = `\"/*\"`\n}) {\n  const result = $`aws cloudfront create-invalidation --distribution-id ${distributionId} --paths ${paths}`\n  return result\n}\n```","collection":"memo","data":{"tags":["aws"],"status":"release","ctime":"2022-09-26T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"21.md","slug":"21","body":"\n드래그 앤 드롭 기능이나 위지윅 편집기를 사용하여 사용자 인터페이스와 레이아웃을 구축하기 위한 도구와 라이브러리입니다. 이러한 도구는 수동으로 코드를 작성하지 않고도 복잡한 UI 디자인과 레이아웃을 만드는 과정을 간소화하는 것을 목표로 합니다.\n\n- [Builder.io - Drag and drop experience builder - Builder.io](https://www.builder.io/)[^21-1]\n- [Blocks UI](https://blocks-ui.com/)[^21-2]\n- [Craft.js](https://craft.js.org/)[^21-3]\n- [Pagedraw — Effortlessly turn mockups into functional UI code](https://pagedraw.io/)[^21-4]\n- [OpenChakra](https://openchakra.app/)[^21-5]\n- [GitHub - chriskitson/react-drag-drop-layout-builder: Drag and drop (DnD) UI layout builder using React and ImmutableJS](https://github.com/chriskitson/react-drag-drop-layout-builder)[^21-6]\n- [Unlayer Embed Plugin | Email and Page Editor for SaaS](https://unlayer.com/embed?ck_subscriber_id=887775097)\n\n---\n\n[^21-1]: 랜딩 페이지, 마케팅 사이트, 전자상거래 스토어를 만들 수 있는 드래그 앤 드롭 빌더\n[^21-2]: 직관적인 UI로 복잡한 반응형 레이아웃, 프로토타입 및 랜딩 페이지를 제작\n[^21-3]: React 기반 비주얼 에디터\n[^21-4]: 반응형 디자인을 만들고 자동으로 코드를 생성\n[^21-5]: 실시간 피드백을 통해 UI 컴포넌트를 빌드할 수 있는 React 기반 비주얼 에디터\n[^21-6]: React 및 ImmutableJS를 사용하여 반응형 UI 레이아웃을 만들기 위한 오픈 소스 드래그 앤 드롭 레이아웃 빌더입니다.\n","collection":"memo","data":{"tags":["ui","builder","dnd"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"210.md","slug":"210","body":"\nnpm 레지스트리에서 특정 패키지에 대한 메타데이터 및 기타 정보를 볼 수 있습니다. 이 명령으로 패키지의 최신 버전, 패키지의 종속성, 작성자 및 라이선스 정보, 기타 세부 정보를 확인할 수 있습니다.\n\n```shell\n# 이전 버전 리스트를 확인하고 싶을때\nnpm view cowsay versions\n\n# 각 버전이 게시된 시간을 확인\nnpm view cowsay time\n```\n\n---\n\n- [npm-view | npm Docs](https://docs.npmjs.com/cli/v6/commands/npm-view)\n- [Find the version of an installed npm package | Sentry](https://sentry.io/answers/version-of-installed-npm-package/)[^210-1]\n\n---\n\n[^210-1]: 설치된 npm 패키지의 버전을 확인하는 방법에 대한 가이드","collection":"memo","data":{"tags":["npm","node"],"status":"release","ctime":"2022-09-29T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"213.md","slug":"213","body":"\n```json\n// 현재 실행된 stage 값을 참조하기\n// 하지만 스크립트를 따로 작성하는게 더 효율적으로 보인다.\n\n{\n  \"scripts\": {\n    \"dev:hello\": \"echo ${npm_lifecycle_event//dev:/}\"\n  }\n}\n```\n\n---\n\n- [yarnpkg - Is there a way to get the name of the npm script passed to the command specified by that script? - Stack Overflow](https://stackoverflow.com/questions/62865856/is-there-a-way-to-get-the-name-of-the-npm-script-passed-to-the-command-specified)[^213-1]\n- [scripts | npm Docs](https://docs.npmjs.com/cli/v8/using-npm/scripts)[^213-2]\n\n---\n\n[^213-1]: npm 스크립트의 이름을 얻는 방법에 대한 질문과 `npm_lifecycle_event` 환경 변수를 사용하는 방법으로 제안\n[^213-2]: package.json 파일에서 스크립트를 사용하는 방법에 대한 개요, 기본 제공 환경 변수 목록도 포함\n","collection":"memo","data":{"tags":["package","shell","npm","node"],"status":"release","ctime":"2022-10-12T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"214.md","slug":"214","body":"\n- [OG Image Generation – Vercel Docs](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation)\n  - [GitHub - vercel/satori: Enlightened library to convert HTML and CSS to SVG](https://github.com/vercel/satori#documentation)\n  - [Vercel OG Image Playground](https://og-playground.vercel.app/)\n\n---\n\n[커스텀 폰트](https://vercel.com/docs/concepts/functions/edge-functions/og-image-examples#using-a-custom-font) 사용 시, 배포 중 **Provided Edge Function is too large** 에러가 발생할 경우 로컬 파일로 사용하지말고 `fetch`로 해당 폰트를 가져온다.[^214-1][^214-2]\n\n---\n\n[^214-1]: https://github.com/cbcruk/oz/commit/0cb90b558cca8bf97bfcc0b36914447845131ab7#diff-ea54c769db531913b015e15682e5b3f4364de740cc7d6c1cb2c8ee2a9ce77379L9-R14\n[^214-2]: https://vercel.com/docs/concepts/functions/edge-functions/limitations#code-size-limit","collection":"memo","data":{"tags":["image"],"status":"release","ctime":"2022-10-16T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"218.md","slug":"218","body":"\nhttps://school.cucumber.io/courses/take/bdd-with-cucumber-javascript/lessons/11261249-introduction-to-bdd\n\nBDD는 무엇을 의미합니까?\n\n> BDD는 시스템의 원하는 동작을 협력적으로 지정하는 접근 방식입니다. 행동의 일부가 합의될 때마다 우리는 그 행동을 구현할 코드의 개발을 \"추진\"하기 위해 해당 사양을 사용합니다.\n\nBDD의 세 가지 관행은 무엇이며 스토리에 어떤 순서로 적용합니까?\n\n> 우리는 스토리에 필요한 행동의 범위를 공동으로 발견 하는 것으로 시작합니다. 일단 우리가 행동에 동의하면 우리는 비즈니스가 읽을 수 있는 언어로 사양을 공식화 합니다. 마지막으로 공식화된 사양을 자동화 하여 시스템이 실제로 예상대로 작동하는지 확인합니다.\n\nCucumber와 BDD는 어떤 관련이 있습니까?\n\n> Cucumber는 문서를 이해하고 자동화된 테스트로 변환하는 도구입니다.\n> \n> BDD는 세 가지 방식으로 구성된 협업적 접근 방식입니다. BDD 실무자는 Cucumber를 사용하여 문서를 자동화할 수 있습니다.\n\n\"살아있는 문서\"의 특별한 점은 무엇입니까?\n\n> 문서가 애플리케이션의 동작과 동기화되지 않을 때 자동으로 알려 주기 때문에 \"살아있는 문서\"라고 부릅니다. 그것이 특별한 점입니다.\n> \n> 완료에 대한 정의의 일부로 이를 검토할 수 있지만 자동으로 유효성이 검사되지 않더라도 작성한 모든 사양 문서에 대해서도 마찬가지입니다.\n> \n> 그것은 자동화된 테스트에 의해 생성 되지 않습니다 - 여전히 작성해야 합니다! 자동화된 테스트는 귀하가 작성한 내용이 사실인지 아닌지를 알려줍니다. \n> \n> 이를 위한 변경 제어 프로세스가 있을 수 있습니다. 설명하는 코드와 함께 소스 제어에 유지하는 것이 좋습니다. 그러나 다시 말해서 특별한 것은 아닙니다. Word 문서에 대해 놀랍도록 투명한 변경 제어 프로세스를 가질 수 있지만 여전히 완전히 구식이고 잘못된 것일 수 있습니다.","collection":"memo","data":{"tags":["bdd","test"],"status":"release","ctime":"2022-10-16T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"22.md","slug":"22","body":"\n[Debouncing and Throttling Explained Through Examples | CSS-Tricks](https://css-tricks.com/debouncing-throttling-explained-examples/)[^22-1]\n\n- throttle: 함수가 호출되는 속도를 제한 (일정시간 동안)\n- debounce: 추가 호출 없이 일정 시간이 경과할 때까지 함수 실행을 지연하거나 제한 (마지막 이벤트만)\n\n---\n\n[^22-1]: 검색 입력, 스크롤 이벤트, 크기 조정 이벤트 등 디바운싱과 스로틀링이 유용할 수 있는 사례들\n","collection":"memo","data":{"tags":["throttle","debounce","lodash","event","ui"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"221.md","slug":"221","body":"\n- [피드백 사다리: Netlify에서 코드 리뷰를 인코딩하는 방법](https://www.netlify.com/blog/2020/03/05/feedback-ladders-how-we-encode-code-reviews-at-netlify/)[^221-1][^221-2]\n- [기본적으로 코드 리뷰 없음](https://www.raycast.com/blog/no-code-reviews-by-default/)[^221-3]\n\n---\n\n[^221-1]: 코드 리뷰는 비동기식 커뮤니케이션의 한 형태이므로 많은 컨텍스트(바디랭귀지 및 주고받을 기회 등)가 손실됩니다. 이것은 대부분의 원격회사인 우리에게 특히 중요하므로 피드백에 약간의 뉘앙스를 추가할 방법을 원했습니다.\n[^221-2]: Feedback Ladder: ⛰ 산(Mountain) / 차단 및 즉각적인 조치 필요, 🧗‍♀️ 볼더(Boulder) / 블로킹, ⚪️ 자갈(Pebble) / 비차단하지만 향후 조치가 필요함, ⏳ 모래(Sand) / 논블로킹이지만 향후 고려 필요, 🌫 먼지(Dust) / 비차단, \"받거나 놔두세요\"\n[^221-3]: 코드 리뷰 없이 신뢰를 기반으로 엔지니어링 문화를 구축한 방법. 다른 사람들의 상황이 자신에게 적용되는지 자문해볼 필요가 있다.\n","collection":"memo","data":{"tags":["code_review","bookmarks"],"status":"release","ctime":"2022-10-16T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"222.md","slug":"222","body":"\n- [Choose Boring Technology](https://boringtechnology.club/)[^222-1][^222-2]\n\n```md\n- 프로젝트에 새롭고 반짝이는 기술보다는 지루한 기술을 선택하는 것이 좋습니다.\n- 흥미로운 기술은 프로젝트에 불필요한 위험을 초래할 수 있습니다.\n- 이미 확립되고 입증된 기술이 성공적인 결과로 이어질 가능성이 더 높습니다.\n- 신기술을 둘러싼 과대 광고는 오해의 소지가 있습니다.\n- 신기술의 수명을 예측하기는 어렵습니다.\n- 지루한 기술은 화려하지 않을 수 있지만 안정적이고 신뢰할 수 있으며 예측 가능합니다.\n- 최신 기술 유행보다는 비즈니스 문제 해결에 집중하세요.\n- 사람과 프로세스에 투자하면 더 나은 결과를 얻을 수 있습니다.\n- 지루한 기술을 선택하는 것은 보수적이거나 위험을 피하기 위한 것이 아니라 프로젝트의 장기적인 성공을 우선시하는 정보에 입각한 결정을 내리기 위한 것입니다.\n```\n\n---\n\n[^222-1]: [Dan McKinley :: Choose Boring Technology](https://mcfunley.com/choose-boring-technology)\n[^222-2]: 항상 최신의 최첨단 솔루션을 쫓기보다는 확립되고 신뢰할 수 있는 기술을 사용하는 것을 지지하는 글. 특히 장기 프로젝트의 경우 기술 선택에서 안정성과 예측 가능성의 중요성을 강조.\n","collection":"memo","data":{"tags":["bookmarks"],"status":"release","ctime":"2022-10-16T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"227.md","slug":"227","body":"\n```ts\ninterface PaginationProps {\n  /** 현재 페이지 번호 */\n  currentPage: number;\n  /** 전체 페이지 수 */\n  totalPages: number;\n  /** 페이지 변경 시 호출되는 콜백 함수 */\n  onPageChange: (pageNumber: number) => void;\n  /** 이전/다음 페이지 링크 표시 여부 (선택적) */\n  showPreviousNext?: boolean;\n  /** 페이지 번호 링크 표시 여부 (선택적) */\n  showPageNumbers?: boolean;\n  /** 페이지당 항목 수 (선택적) */\n  pageSize?: number;\n}\n```\n\n- [cbcruk/react-flat-pagination](https://github.com/cbcruk/react-flat-pagination)\n- [mayankshubham/react-pagination](https://github.com/mayankshubham/react-pagination)\n- [react-component/pagination](https://github.com/react-component/pagination)\n- [wwwaiser/react-js-pagination](https://github.com/wwwaiser/react-js-pagination)\n- [material-ui/react-pagination/](https://mui.com/material-ui/react-pagination/)\n- [Pagination - NuxtLabs UI](https://ui.nuxtlabs.com/navigation/pagination)\n- [AdeleD/react-paginate](https://github.com/AdeleD/react-paginate)\n  - [How to Implement Pagination in React](https://hygraph.com/blog/react-pagination)\n\n---\n\n> 하지만 너무 많은 기능이 필요없기 때문에 최대한 단순한 컴포넌트를 만들었다.","collection":"memo","data":{"tags":["pagination"],"status":"release","ctime":"2022-11-07T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"228.md","slug":"228","body":"\n```\nyarn add -D react-app-rewired customize-cra\n```\n\n```json\n// package.json\n\"scripts\": {\n  \"start\": \"react-app-rewired start\",\n  \"build\": \"react-app-rewired build\",\n  \"test\": \"react-app-rewired test\"\n},\n```\n\n```json\n// .babelrc\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-decorators\", { \"version\": \"legacy\" }],\n    [\"@babel/plugin-proposal-class-properties\", { \"loose\": true }]\n  ]\n}\n```\n\n```js\n// config-overrides.js\nconst { useBabelRc, override } = require('customize-cra')\n\nmodule.exports = override(useBabelRc())\n```\n\n---\n\n- [Simplest Way to Install Babel Plugins in Create React App - DEV Community 👩‍💻👨‍💻](https://dev.to/ansonh/simplest-way-to-install-babel-plugins-in-create-react-app-7i5)\n\n---\n\n> [CRACO](https://craco.js.org/)로 구성하는게 지금은 맞는 것 같다.","collection":"memo","data":{"tags":["create-react-app","deprecated"],"status":"release","ctime":"2022-11-14T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"229.md","slug":"229","body":"\n```\n# .env\nREACT_APP_VERSION=0.0.0-${TURBO_HASH}\n```\n\nREACT_APP_VERSION을 자동으로 입력할 방법을 찾다가 결국 hash값을 추가했다.\n\n---\n\n- [Adding Custom Environment Variables | Create React App](https://create-react-app.dev/docs/adding-custom-environment-variables/#expanding-environment-variables-in-env)\n- [GitHub - motdotla/dotenv-expand: Variable expansion for dotenv. Expand variables already on your machine for use in your .env file.](https://github.com/motdotla/dotenv-expand)\n- [Create timestamp variable in bash script - Stack Overflow](https://stackoverflow.com/questions/17066250/create-timestamp-variable-in-bash-script)","collection":"memo","data":{"tags":["create-react-app","node"],"status":"release","ctime":"2022-11-21T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"23.md","slug":"23","body":"\n다음은 Raspberry Pi를 사용하여 날씨 정보를 표시하는 프로젝트의 두 가지 예입니다. 이 두 프로젝트 모두 Raspberry Pi를 사용하여 날씨 표시 또는 날씨 앱을 만드는 방법을 보여줍니다. 또한 Python 스크립트 또는 웹 기반 애플리케이션을 사용하여 날씨 데이터를 가져오고 표시하는 다양한 방법을 보여줍니다. 이 프로젝트는 Raspberry Pi를 사용하여 자신만의 날씨 디스플레이 또는 앱을 구축하는 데 관심이 있는 모든 사람에게 좋은 출발점이 될 수 있습니다.[^23-3]\n\n- [Raspberry Pi 'WeatherClock' shows you the hour's forecast - Raspberry Pi](https://www.raspberrypi.org/blog/raspberry-pi-weatherclock-shows-you-the-hours-forecast/)[^23-1]\n- [Show Dev: RaspberryPi Weather ⛈ fuelled by Netlify functions and Preact - DEV Community](https://dev.to/moigonzalez/show-dev-raspberrypi-weather-fuelled-by-netlify-functions-and-preact-bne)[^23-2]\n\n---\n\n[^23-1]: 작은 화면에 현재 시간과 시간별 일기 예보를 표시하는 프로젝트입니다. 이 프로젝트는 Raspberry Pi Zero W와 1.3인치 OLED 디스플레이를 사용하며 [OpenWeatherMap API](https://openweathermap.org/api)에서 날씨 데이터를 가져와 화면에 표시하는 Python 스크립트로 구동됩니다.\n[^23-2]: [Preact](https://preactjs.com/), [Netlify Functions](https://www.netlify.com/products/functions/)를 사용하여 OpenWeatherMap API에서 날씨 데이터를 가져옵니다.\n[^23-3]: https://weather-mu.vercel.app/","collection":"memo","data":{"tags":["raspberry_pi"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"231.md","slug":"231","body":"\n```yaml\nversion: 1\napplications:\n  - frontend:\n      phases:\n        preBuild:\n          commands:\n            # AWS Amplify 에서 모노레포 구조를 사용 할 경우 root 레벨로 올라가서 install\n            - cd ../../\n            - echo \"$PWD\"\n            - yarn install\n        build:\n          commands:\n            - echo \"$PWD\"\n            # 현재 root로 이동한 상태이므로 $AMPLIFY_MONOREPO_APP_ROOT를 바로 참조하도록 설정\n            - if [ $NODE_ENV_VARIABLES = \".env.development\" ]; then cat \"./$AMPLIFY_MONOREPO_APP_ROOT/$NODE_ENV_VARIABLES\" > \"./$AMPLIFY_MONOREPO_APP_ROOT/.env.production\"; fi\n            - yarn run \"build:$AMPLIFY_MONOREPO_APP\"\n      artifacts:\n        baseDirectory: build\n        files:\n          - '**/*'\n      cache:\n        paths:\n          - node_modules/**/*\n    appRoot: apps/app\n```\n\n---\n\n- [Monorepo build settings - AWS Amplify Hosting](https://docs.aws.amazon.com/amplify/latest/userguide/monorepo-configuration.html)","collection":"memo","data":{"tags":["monorepo"],"status":"release","ctime":"2022-11-28T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"232.md","slug":"232","body":"\n- [react-mentions](https://github.com/signavio/react-mentions)[^232-1]\n- [tribute](https://github.com/zurb/tribute)[^232-2]\n- [react-input-trigger](https://github.com/abinavseelan/react-input-trigger)[^232-3]\n- [react-contenteditable](https://github.com/lovasoa/react-contenteditable)[^232-4]\n- [draft-js](https://github.com/facebook/draft-js)[^232-5]\n\n---\n\n[^232-1]: `textarea`에서 특정 키입력이 발생할 경우 액션(멘션)을 발생시키는 기능\n[^232-2]: 옜날에는 어떻게 한거지? 궁금해서 찾아봤습니다\n[^232-3]: 입력필드에서 문자 트리거\n[^232-4]: [contenteditable](https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/contenteditable) 컴포넌트\n[^232-5]: 의식의 흐름 속 갑자기 생각나버림","collection":"memo","data":{"tags":["editor","input"],"status":"release","ctime":"2022-12-05T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"233.md","slug":"233","body":"\n- 공통 컴포넌트\n  - `Tabs` 만들면서 이건 어렵다는 결론\n- 대안\n  - [react-spectrum](https://react-spectrum.adobe.com/react-spectrum/index.html)\n    - [Consider upgrading to a component-based API](https://github.com/adobe/react-spectrum/discussions/2368)\n    - [react-aria-components](https://github.com/devongovett/react-aria-components)[^233-1]\n  - [radix-ui](https://www.radix-ui.com/)\n  - [Headless UI](https://headlessui.com/)\n  - [Reach UI](https://reach.tech/)\n  - [Ariakit](https://ariakit.org/)\n\n---\n\n> 좋은 시스템일수록 실제 서비스에 적용하기는 더 어렵다는 문제가 발생. 결국 필요한건 *headless* 인데 생각보다 많지 않고 어떤 선택이 좋은 선택인가에 대한 조심스러운 부분이 있다.\n\n---\n\n[^233-1]: [참고](https://reactspectrum.blob.core.windows.net/reactspectrum/cee46dbc35a111b8e4ba2da28da542783de00a44/docs/react-aria/Button.html)\n[^233-2]: 컴퓨팅 및 소프트웨어에서 헤드리스는 그래픽 인터페이스가 없는 소프트웨어 또는 서버 또는 프런트 엔드 구성 요소와 백 엔드 구성 요소를 분리하는 소프트웨어 플랫폼을 가리킬 수 있습니다.","collection":"memo","data":{"tags":["ui","design_system","headless"],"status":"release","ctime":"2022-12-05T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"234.md","slug":"234","body":"\n```bash\n# `System limit for number of file watchers reached`\n\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p\n```\n\n---\n\n- [Watch and WatchOptions | webpack](https://webpack.js.org/configuration/watch/#not-enough-watchers)","collection":"memo","data":{"tags":["node","webpack"],"status":"release","ctime":"2022-12-11T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"235.md","slug":"235","body":"\n```bash\n# 빌드 시 timestamp를 참조하기 위한 방법\ntimestamp=$(date +%s) # 1670759329\n```\n\n```\n# 하지만 현실에서는 `TURBO_HASH`값을 참조하는 방식을 `.env`에서 사용\nREACT_APP_VERSION=1.0.0-${TURBO_HASH}\n```\n\n---\n\n- [Create timestamp variable in bash script - Stack Overflow](https://stackoverflow.com/questions/17066250/create-timestamp-variable-in-bash-script)[^235-1]\n- [dotenv-expand](https://github.com/motdotla/dotenv-expand#expand)[^235-2]\n\n---\n\n[^235-1]: 스크립트에서 현재 타임스탬프를 특정 형식의 변수로 만드는 방법에 대한 질문. 특정 형식 문자열과 함께 날짜 명령을 사용하여 타임스탬프를 만들고 변수에 저장하도록 하는 답변들...\n[^235-2]: dotenv-expand는 `.env` 파일에서 환경 변수를 확장하기 위한 모듈입니다. 중첩 변수 확장 및 셸 명령 실행과 같은 더 많은 고급 기능을 사용 가능.","collection":"memo","data":{"tags":["shell","node","env"],"status":"release","ctime":"2022-12-11T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"237.md","slug":"237","body":"\n```shell\n# 비디오 자르기\nffmpeg -i INPUT.mp4 -ss 00:00:00 -to 00:01:00 -c:v copy -c:a copy OUTPUT.mp4\n```\n\n---\n\n- [Cutting the videos based on start and end time using ffmpeg - Stack Overflow](https://stackoverflow.com/questions/18444194/cutting-the-videos-based-on-start-and-end-time-using-ffmpeg)","collection":"memo","data":{"tags":["ffmpeg"],"status":"release","ctime":"2022-12-11T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"238.md","slug":"238","body":"\n- [Textdb](https://textdb.dev/)[^238-1]\n- [JavascriptDB](https://javascriptdb.com/docs)[^238-2]\n\n---\n\n[^238-1]: 일반 텍스트 파일을 데이터 소스로 사용하여 간단한 웹 애플리케이션을 구축하고 배포하기 위한 플랫폼. 백엔드 서버나 데이터베이스 없이 배포 가능. 텍스트 파일에서 데이터를 읽고 쓰고 검색하는 데 사용할 수 있는 간단한 REST API를 제공.\n[^238-2]: JavaScript 애플리케이션용 경량 데이터베이스 엔진. 브라우저에서 데이터를 저장, 쿼리 및 조작하기 위한 간단하고 직관적인 API를 제공하며 챗봇, 검색 엔진 및 게임을 포함한 다양한 유형의 애플리케이션을 구축하는 데 사용 가능. 이 데이터베이스는 오프라인에서 작동하도록 설계되어 PWA(Progressive Web Application) 및 기타 유형의 클라이언트측 애플리케이션을 구축하는 데 이상적.","collection":"memo","data":{"tags":["db"],"status":"release","ctime":"2022-12-11T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"24.md","slug":"24","body":"\n데이터 시각화, 교육 목적 또는 단순한 재미를 위해 자신만의 대화형 지구본을 구축하는 데 관심이 있는 모든 사람에게 도움이 될 수 있습니다. 그들은 지구본을 만들기 위한 다양한 접근 방식과 기술을 보여주고 지구본 데이터로 작업할 때의 문제와 기회에 대한 귀중한 통찰력을 제공합니다.\n\n- [To design and develop an interactive globe](https://stripe.com/blog/globe)[^24-1]\n- [How we built the GitHub globe | The GitHub Blog](https://github.blog/2020-12-21-how-we-built-the-github-globe/)[^24-2]\n- [Gatsby Serverless Functions And The International Space Station — Smashing Magazine](https://www.smashingmagazine.com/2021/07/gatsby-serverless-functions-international-space-station/)[^24-3]\n- [GitHub - shuding/cobe: 5kB WebGL globe lib.](https://github.com/shuding/cobe)[^24-4]\n\n---\n\n[^24-1]: WebGL과 [Three.js](https://threejs.org/)를 사용하여 지구본을 렌더링하고 [Mapbox](https://www.mapbox.com/)를 사용하여 데이터를 표시하는 지구본을 디자인하고 개발하는 과정을 설명합니다.\n[^24-2]: GitHub 팀이 전 세계 GitHub 사용자의 위치를 보여주는 대화형 지구본을 구축한 방법을 설명합니다. 이 게시물은 WebGL 및 [d3-geo](https://github.com/d3/d3-geo) 라이브러리를 사용하여 시각화를 생성하는 지구본 구축의 기술적 문제에 대해 자세히 설명합니다.\n[^24-3]: Gatsby 서버리스 기능을 사용하여 국제 우주 정거장(ISS)의 위치를 추적하는 대화형 지구본을 구축하는 방법에 대해 설명합니다. 이 기사는 ISS의 위치를 표시하기 위해 Three.js 및 [satellite.js](https://github.com/shashwatak/satellite-js)를 사용하는 지구본 구축의 기술적 세부 사항을 다룹니다.\n[^24-4]: 개발자가 자신만의 대화형 지구본을 만들 수 있는 경량 WebGL 지구본 라이브러리입니다.","collection":"memo","data":{"tags":["globe","webgl"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"243.md","slug":"243","body":"\n```js\nasync function loader() {\n  const family = 'Material Symbols Outlined'\n  const source =\n    'url(https://fonts.gstatic.com/s/materialsymbolsoutlined/v75/kJEhBvYX7BgnkSrUwT8OhrdQw4oELdPIeeII9v6oFsLjBuVY.woff2)'\n  const fontFace = new FontFace(family, source)\n\n  await fontFace.load()\n}\n```\n\n[CSS Font Loading API](https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API) 는 비교적 새로운 웹 플랫폼 추가 기능입니다. API가 도입되기 전에 웹 개발자는 일반적으로 CSS에 의존하여 웹 글꼴을 로드해야 했으며 이로 인해 로드와 성능 문제가 발생할 수 있었습니다.\n개발자는 로드 방법을 더 잘 제어할 수 있을 뿐만 아니라 오류를 처리하고 웹 사이트에서 사용되는 시기와 방법을 제어할 수 있습니다.\n전반적으로 CSS Font Loading API는 웹 개발자에게 글꼴이 정확하고 효율적으로 로드 되도록 하는 강력한 도구를 제공하는 동시에 글꼴 로드 및 사용에 대한 더 많은 제어 기능을 제공합니다.\n","collection":"memo","data":{"tags":["font"],"status":"release","ctime":"2022-12-29T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"247.md","slug":"247","body":"\n- [Human Interface Guidelines - Human Interface Guidelines - Design - Apple Developer](https://developer.apple.com/design/human-interface-guidelines/):\n디자인 원칙은 사용자 경험을 향상시키기 위한 기본 가이드라인입니다. Apple의 Human Interface Guidelines는 애플 제품을 위한 인터페이스 디자인에 대한 원칙과 모범 사례를 제공합니다. 예를 들어, 간결하고 일관된 디자인, 직관적인 상호 작용, 정보의 집중화, 애니메이션 및 트랜지션의 적절한 사용 등을 다룹니다. 이러한 가이드라인을 따르면 사용자들이 애플 제품과 앱을 쉽게 이해하고 사용할 수 있게 됩니다.\n- [All WCAG 2.1 Techniques | WAI | W3C](https://www.w3.org/WAI/WCAG21/Techniques/):\n접근성은 모든 사용자가 웹 콘텐츠에 접근하고 상호 작용할 수 있도록 보장하는 중요한 측면입니다. 웹 접근성은 장애를 가진 사용자, 고령자, 비전 및 청각 장애가 있는 사용자, 키보드 사용자 등을 고려하여 웹 콘텐츠가 포용적이고 이용 가능한지를 확인합니다. WCAG는 웹 접근성을 높이기 위한 일련의 표준과 기술을 제공합니다. 텍스트 대체, 키보드 접근성, 명도 대비, 컨텐츠의 가독성, 사용자 인터페이스 컨트롤의 명확성 등을 다룹니다. WCAG는 웹 개발자와 디자이너들이 웹 콘텐츠를 접근 가능하게 만들기 위한 방법과 기술을 제시합니다.","collection":"memo","data":{"tags":["wcag","ux"],"status":"release","ctime":"2023-02-20T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"249.md","slug":"249","body":"\nnpm을 사용하여 패키지의 여러 버전을 설치하려면 npm 설치 명령 뒤에 패키지 이름과 설치하려는 버전 번호를 사용하면 됩니다. 이 명령을 다른 버전 번호로 반복하여 여러 버전의 패키지를 설치할 수 있습니다.\n\n```shell\nyarn add react-tooltip-5@npm:react-tooltip@5.8.3\n```\n\n```json\n{\n  \"react-tooltip-5\": \"npm:react-tooltip@5.8.3\"\n}\n```\n\n---\n\n- [how to install multiple versions of package using npm - Stack Overflow](https://stackoverflow.com/questions/26414587/how-to-install-multiple-versions-of-package-using-npm)\n- [How to install multiple versions of a npm package at the same time/project - DEV Community](https://dev.to/3imed_jaberi/how-to-install-multiple-versions-of-a-npm-package-at-the-same-time-project-2a29)","collection":"memo","data":{"tags":["npm"],"status":"release","ctime":"2023-02-27T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"252.md","slug":"252","body":"\nImmer가 생성하는 맵과 세트는 인위적으로 불변으로 만들어집니다. 즉, 프로듀서 외부에서 세트, 클리어 등과 같은 변경 메서드를 시도할 때 예외(throw an exception)가 발생합니다.\n\n```js\ntest('Map and Set', () => {\n  const baseMap = new Map();\n\n  const nextBaseMap = create(baseMap, (draft) => {\n    draft.set('a', 1);\n  });\n\n  expect(nextBaseMap).toMatchInlineSnapshot(`\n    Map {\n      \"a\" => 1,\n    }\n  `);\n});\n```\n\n---\n\n- [Map and Set | Immer](https://immerjs.github.io/immer/map-set/)","collection":"memo","data":{"tags":["javascript","immer","Map","Set"],"status":"release","ctime":"2023-03-13T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"255.md","slug":"255","body":"\n```js\nconst { Parser } = require('acorn')\nconst JSXParser = Parser.extend(require('acorn-jsx')())\n\nconst isReactComponent = Boolean(\n  JSON.stringify(\n    JSXParser.parse(fileContent, {\n      sourceType: 'module',\n      ecmaVersion: 'latest',\n    })\n  ).includes('JSXIdentifier')\n)\n```\n\n---\n\n- https://github.com/vitejs/vite/discussions/3448\n- https://github.com/jyash97/cra-to-vite/blob/master/src/index.js#L40-L43","collection":"memo","data":{"tags":["typescript","jsx","parser"],"status":"release","ctime":"2023-03-19T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"257.md","slug":"257","body":"\n```js\nasync function main({ onActivate, onError, onReading, onDenied }) {\n  const result = await navigator.permissions.query({\n    name: 'ambient-light-sensor',\n  })\n\n  if (result.state === 'denied') {\n    onDenied()\n    return\n  }\n\n  const ambientLightSensor = new AmbientLightSensor({ frequency: 20 })\n  \n  ambientLightSensor.addEventListener('activate', onActivate)\n  ambientLightSensor.addEventListener('error', onError)\n  ambientLightSensor.addEventListener('reading', () => {\n    const ISO = 100\n    const C = 250\n\n    const EV = Math.round(Math.log2((ambientLightSensor.illuminance * ISO) / C))\n\n    onReading(EV)\n  })\n\n  ambientLightSensor.start()\n}\n```\n\n---\n\n- [AmbientLightSensor - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/AmbientLightSensor)\n- [Ambient Light Sensor](https://www.w3.org/TR/ambient-light/)\n- [Sensors for the web - Chrome Developers](https://developer.chrome.com/articles/generic-sensor/)[^257-1]\n- [Ambient Light Sensor | Can I use... Support tables for HTML5, CSS3, etc](https://caniuse.com/ambient-light)\n\n---\n\n[^257-1]: 주변광 센서 인터페이스가 포함된 일반 센서 API를 사용하는 방법을 설명","collection":"memo","data":{"tags":["web_api","AmbientLightSensor"],"status":"release","ctime":"2023-03-24T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"268.md","slug":"268","body":"\n*Tachyon 작동 방식*\n\nTachyon은 사용자의 웹 브라우저에 내장된 기능을 활용하여 사용자가 `<a href=\"...\"></a>` 태그에 커서를 50밀리초 이상 올려놓으면 콘텐츠를 미리 로드하는 `<link rel=\"prerender\" href=\"...\">` 태그를 생성합니다(기본값).\n\n기본적으로 사용자가 링크를 실제로 클릭/탭하기 전에 방문하려는 페이지의 로딩을 시작하도록 브라우저에 지시합니다. 이는 웹 브라우저가 백그라운드에서 준비를 시작하도록 지시합니다.\n\n사용자가 실제로 링크를 클릭하고 다음 페이지로 이동할 준비가 되면 해당 페이지는 이미 준비되어 프레임으로 가져와 페이지 로드 시간이 훨씬 빨라집니다.\n\n---\n\n*이유; 방법*\n\nTachyon은 단순성을 핵심으로 설계되었으며, 이는 결코 우연이 아닙니다. 단순성에 중점을 두었기 때문에 관리자부터 최종 사용자까지 Tachyon을 사용하는 모든 사람이 성능, 확장성, 유지보수성, 보안 및 사용 편의성에서 이점을 누릴 수 있습니다.\n\n다른 대안에 비해 Tachyon이 개선한 주요 사항 중 하나는 일반적인 `<link rel=\"prefetch\" href=\"...\">` 대신 `<link rel=\"prerender\" href=\"...\">`를 사용하여 페이지 로드가 훨씬 빨라졌다는 점입니다. 프리페치는 페이지를 다운로드하기만 하고 프리렌더는 페이지를 다운로드하여 렌더링을 시작한다는 점에서 두 방법의 차이는 자명합니다.\n\n또한 Tachyon은 클릭 가능성이 높은 페이지만 미리 로드하고 사용자의 커서가 링크에서 벗어나면 페이지 미리 로드를 중지하는 등 다른 방식보다 훨씬 효율적이고 방해가 덜 되는 방식으로 프리로딩 동작을 구현합니다. 이것이 바로 제가 Tachyon을 만든 이유이며, 지금까지도 왜 다른 대안이 이 기능을 제공하지 않는지 모르겠습니다. 그 결과, Tachyon은 다른 대안에 비해 사이트에 대역폭 부하를 극히 일부만 추가합니다.\n\n다른 프로젝트보다 기능이 적은 것도 아닙니다(인스턴트 페이지와 가상 기능 동등성 및 몇 가지 추가 기능이 있습니다). 단지 다른 프로젝트보다 간결한 방식으로 구현된 기능일 뿐입니다. 별도의 설정 없이 모바일을 지원하고 화이트리스트, 블랙리스트, 사용자 지정 타이밍 및 동일 출처 제한을 구현하며, 이러한 기능을 사용하기가 훨씬 쉽습니다. 매우 복잡한 기능이 필요한 경우 Tachyon이 최선의 선택이 아닐 수 있지만, 그 외의 모든 사용자에게는 처음부터 최고의 옵션이 될 수 있도록 설계된 Tachyon이 적합합니다.\n\n---\n\n- https://fasterthanlight.net/\n- https://developer.chrome.com/blog/prerender-pages/\n- https://developer.mozilla.org/en-US/docs/Glossary/Prefetch\n- https://developer.mozilla.org/en-US/docs/Glossary/Prerender\n","collection":"memo","data":{"tags":["performance","tachyon","prefetch","prerender"],"status":"release","ctime":"2023-05-01T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"269.md","slug":"269","body":"\n모바일 웹뷰에서 특정 영역을 *zoom*할수 있게 해달라는 요청이 있어서 적용한 내역. 정확히 기억은 안나는데 *react-prismazoom*를 선택했다.\n\n*react-prismazoom*은 CSS 변환을 사용하여 React에서 확대 및 이동 기능을 제공하는 팬 및 줌 컴포넌트입니다. 이 라이브러리는 prop-types, react, react-dom 모듈에만 의존하며, 데스크톱 및 모바일에서 모두 작동합니다.\n\n주요 기능 및 특징\n\n- 확대 기능 : 마우스 휠이나 두 손가락으로 확대할 수 있습니다. 더블 클릭 또는 더블 탭을 사용하여 확대할 수도 있으며, 선택한 영역을 확대하여 중앙에 배치할 수 있습니다.\n- 이동 기능 : 마우스 포인터나 줌 인 상태에서 손가락을 사용하여 이동할 수 있습니다. 확대된 상태에서는 사용 가능한 공간에 따라 직관적으로 이동합니다. 요소를 이동할 수 있는 방향을 나타내기 위해 커서 스타일을 조정합니다.\n\n---\n\n그 외 비슷한\n\n- [react-quick-pinch-zoom](https://github.com/retyui/react-quick-pinch-zoom)\n- [react-zoom-pan-pinch](https://prc5.github.io/react-zoom-pan-pinch)\n- [react-medium-image-zoom](https://github.com/rpearce/react-medium-image-zoom)\n- [react-image-zooom](https://mario-duarte.github.io/react-image-zooom)\n- [use-pan-and-zoom](https://github.com/wouterraateland/use-pan-and-zoom)","collection":"memo","data":{"tags":["ui","react","zoom"],"status":"release","ctime":"2023-05-14T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"27.md","slug":"27","body":"\n- [Overlaying Video With Transparency While Wrangling Cross-Browser Support | CSS-Tricks](https://css-tricks.com/overlaying-video-with-transparency-while-wrangling-cross-browser-support/)\n- [How to use transparent videos on the web in 2021 - Rotato](https://www.rotato.app/read/transparent-videos-for-the-web)\n- [How to make HEVC, H265 and VP9 videos with an alpha channel for the web | Kit Cross](https://kitcross.net/hevc-web-video-alpha-channel/)\n- [Alpha Masking with FFMPEG | Curio Museum](https://curiosalon.github.io/blog/ffmpeg-alpha-masking/)[^27-1]\n\n```\nffmpeg -framerate 25 -i image_%1d.png -c:v libvpx-vp9 -pix_fmt yuva420p output.webm\n```\n\n단점\n\n- 두벌로 인코딩 작업을 해야한다. MacOS가 아닐경우 번거로운 부분이 존재한다.\n- 브라우저 지원이 애매하게 걸친 부분이 존재한다.\n- (개인적인 느낌) 사이즈가 커졌을 경우 프레임 드랍이 있다.\n\n...그래서 어차피 안되는거 새로운 도전을 해보고 싶어서 크로마키 효과를 떠올렸다. sharp로 이미지 배경을 green 컬러로 채우고 그 이미지들을 합쳐서 동영상으로 변환. 그리고 canvas에 그리고 색상을 추출해서 green값을 alpha값으로 변환하면 완벽하지 않을까 싶었는데 겹치는 영역을 전혀 생각못했다. 이부분은 뭔가 특정 알고리즘이 있는 것 같은데 그냥 단순히 근사치[^27-5]로 적용했을때 결과물이 완벽하지는 않다.\n\n- [캔버스(canvas)를 이용한 비디오 조작하기 - Web API | MDN](https://developer.mozilla.org/ko/docs/Web/API/Canvas_API/Manipulating_video_using_canvas)[^27-2]\n- [Green Screen in the Browser With HTML Canvas](https://www.kapwing.com/blog/green-screen-in-browser/)[^27-3]\n- [Canvas: Do cool stuff with video in the browser | Mux blog](https://mux.com/blog/canvas-adding-filters-and-more-to-video-using-just-a-browser/)[^27-4]\n\n---\n\n[^27-1]: 여기서는 좀 더 나아가서 ffmpeg으로 드로잉 하는 부분까지 알려주고 있다.\n[^27-2]: 기본 배경지식을 설명하고 있다. video->canvas\n[^27-3]: hsv로 색상값을 체크하는 방법을 알려주고 있다. 그리고 해당 연산은 worker로 따로 분리해서 처리.\n[^27-4]: canvas 에서 색상값을 체크해서 필터 기능을 구현하고 머신러닝으로 모션탐지 기능구현이 가능하다는 예제를 보여준다.\n[^27-5]: [javascript - How to accurately filter RGB value for chroma-key effect - Stack Overflow](https://stackoverflow.com/questions/38419980/how-to-accurately-filter-rgb-value-for-chroma-key-effect)","collection":"memo","data":{"tags":["video","ffmpeg","canvas"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"270.md","slug":"270","body":"\n```js\nconst root = createRoot('#confirm-root')\n\nroot.render(<Confirm />)\n```\n\nconfirm ui를 만들다보면 `window.confirm`을 호출하는 방식으로 사용하는게 가장 좋은 방법인데 (안그러면 `state`로 관리해야하고 결국 이건 무의미한 코드의 반복이다.)\n이걸 react로 구현하려면 결국 render를 사용해야함. *react-confirm*, *react-confirm-alert* 둘다 소스를 보면 비슷한 방식으로 접근한다.\n\n- https://github.com/haradakunihiko/react-confirm/tree/master\n- https://github.com/GA-MO/react-confirm-alert/tree/master","collection":"memo","data":{"tags":["react","ui","confirm","react-confirm","react-confirm-alert"],"status":"release","ctime":"2023-05-14T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"271.md","slug":"271","body":"\n[deep-object-diff](https://github.com/mattphillips/deep-object-diff)와 비슷한 비교 알고리즘을 구현하는 방법은 다양할 수 있지만, 대표적인 접근 방식은 재귀적으로 객체를 탐색하면서 속성을 비교하는 것입니다. 이를 위해 일반적으로 다음과 같은 과정을 따릅니다:\n\n1. 입력으로 받은 두 객체를 비교합니다.\n2. 첫 번째 객체의 속성을 순회하면서 두 번째 객체에 동일한 속성이 있는지 확인합니다.\n   - 동일한 속성이 있다면, 해당 속성의 값을 비교합니다.\n   - 값이 같다면, 두 객체의 해당 속성은 동일하므로 비교를 종료합니다.\n   - 값이 다르다면, 속성이 변경된 것으로 간주하고 변경된 값을 기록합니다.\n3. 첫 번째 객체의 속성을 순회하면서 두 번째 객체에 동일한 속성이 없는 경우, 해당 속성은 첫 번째 객체에서 삭제된 것으로 간주합니다.\n4. 두 번째 객체의 속성을 순회하면서 첫 번째 객체에 동일한 속성이 없는 경우, 해당 속성은 두 번째 객체에 추가된 것으로 간주합니다.\n5. 만약 속성이 객체나 배열인 경우, 재귀적으로 해당 객체나 배열을 탐색하면서 내부의 속성을 비교합니다.\n\n이러한 과정을 재귀적으로 반복하면서 객체의 모든 속성을 비교하고 차이를 식별합니다. 재귀적으로 탐색하므로 중첩된 객체나 배열에 대해서도 동일한 비교 알고리즘을 적용할 수 있습니다.\n\n이러한 비교 알고리즘을 구현하기 위해 각 언어나 라이브러리는 자체적으로 다양한 방식과 최적화 기법을 사용할 수 있습니다. 그리고 deep-object-diff나 비슷한 도구들은 이러한 알고리즘을 구현하여 사용자에게 편리한 인터페이스를 제공하는 것입니다.\n\n---\n\n- [deep-object-diff](https://github.com/mattphillips/deep-object-diff)\n- [json-diff](https://github.com/andreyvit/json-diff)\n- [microdiff](https://github.com/AsyncBanana/microdiff)\n","collection":"memo","data":{"tags":["json","diff","deep-object-diff","json-diff","microdiff"],"status":"release","ctime":"2023-05-18T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"272.md","slug":"272","body":"\nStacking Workflow는 큰 엔지니어링 작업을 작은 단위의 코드 변경으로 나누어 독립적으로 테스트, 검토 및 병합할 수 있는 프로세스입니다. 스택은 서로 의존하는 일련의 코드 변경으로 이루어집니다.\n\nWhy stack: Stacking은 작성자가 검토를 기다리는 동안 블록되지 않고 작업할 수 있게 하며, 더 품질 높은 검토 의견을 유도하고 작은 변경 사항을 빠르게 병합할 수 있게 합니다. 검토어는 작은 규모의 변경 사항을 검토하고, 재검토하는 시간을 줄이며, 무언가 잘못되었을 때 이를 분석하고 롤백할 수 있는 세분성을 갖추게 됩니다.\n\nWhat is stacking: Stacking은 여러 개의 의존하는 Pull Request(PR)로 이루어진 것입니다. Stacking은 작성자가 빠른 검토를 받을 수 있도록 하고, 높은 품질의 검토 의견을 얻을 수 있게 하며, 작은 변경 사항을 빠르게 병합할 수 있습니다. 검토어는 작은 규모의 변경 사항을 검토하며, 재검토 시간이 줄어들고, 필요한 경우 분석 및 롤백할 수 있는 세분성을 갖게 됩니다.\n\nStacking vs feature branches: Stacking과 기능 브랜치 모두 트렁크 기반 개발을 가능하게 합니다. 그러나 Stacking은 기능 브랜치와 다른 점이 있는데, 기능 브랜치는 주로 main 브랜치에서 직접 분기되어야 하는 반면, Stacking은 서로 의존하는 PR들 간에 분기될 수 있다는 점입니다. 기능 브랜치는 비대해지고 검토하기 어려워질 수 있지만, 스택은 항상 가볍고 모듈식으로 유지될 수 있습니다. 기능 브랜치는 한꺼번에 검토되고 CI를 통과하고 한 번에 병합되어야 하지만, 스택은 작은 조각으로 검토되고 각각의 브랜치에서 CI를 통과한 후 언제든 병합될 수 있습니다.\n\nCreating a change: Stacking은 이미 브랜치에서 분기하고 서로 의존하는 두 개의 PR을 열었다면 이미 사용한 것입니다. 이 워크플로우는 git에서 기본적으로 지원되며, main 대신에 부모 PR에서 개발을 시작하고 브랜치를 확인하면 됩니다.\n\nSplitting: 일부 개발자는 처음에 큰 변경 사항을 작성하고 나중에 이를 작은 변경 사항의 스택으로 나누는 것을 선호합니다. 이는 최종 코드 구조를 미리 예측하기 어려울 때 도움이 되며, 작은, 독립적으로 검토 가능한 일련의 변경 사항을 제출하고자 할 때 유용합니다.\n\nUpdating a change: 스택된 브랜치를 업데이트하는 것은 전통적인 브랜치를 업데이트하는 것과 다르지 않습니다. 유일한 차이점은 스택된 브랜치를 업데이트한 후에는 의존하는 PR의 병합 베이스도 업데이트해야 한다는 것입니다. 변경 사항마다 리베이스하는 것은 불안하게 느껴질 수 있지만, 도구를 사용하면 자동화할 수 있습니다.\n\nOpening and updating pull requests: 검토를 위해 준비되면 스택의 각 브랜치당 하나의 PR을 생성할 수 있습니다. 두 번째 브랜치에서 스택을 만들면 첫 번째 PR을 열 수 있습니다. 자주 변경 사항을 제출하면 PR이 작고 동료들이 쉽게 검토할 수 있습니다.\n\nMerging PRs: 변경 사항이 승인되고 CI를 통과하면 병합할 준비가 됩니다. 스택된 변경 사항은 항상 트렁크로 병합되며, 스택의 하단부터 병합됩니다. PR이 병합되면 의존하는 PR의 베이스 브랜치를 트렁크로 업데이트해야 합니다.\n\n---\n\n- [Stacking | Graphite](https://graphite.dev/stacking)\n- [코드 리뷰의 또 다른 접근 방법: Pull Requests vs. Stacked Changes | 인프콘 2022 - YouTube](https://youtu.be/XRZPkYnWa48)","collection":"memo","data":{"tags":["git","stacking"],"status":"release","ctime":"2023-05-20T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"274.md","slug":"274","body":"\n한 마을에 개발자들이 모여 프로젝트를 진행하고 있었습니다. 그 중 한 명의 개발자인 에릭은 팀에서 핵심적인 역할을 맡고 있었고, 그의 전문적인 지식과 능력은 프로젝트의 성공에 큰 영향을 미칠 정도였습니다. 그러나 에릭은 여행을 갈 계획을 세우고 모두에게 알리지 않았습니다.\n\n어느 날, 프로젝트 팀은 예기치 않은 문제에 직면했습니다. 시스템의 일부가 오작동을 일으켜 복구해야 할 상황이었는데, 당연히 에릭이 이를 해결할 수 있었습니다. 그러나 에릭은 이미 여행을 떠나버렸고, 팀은 그를 찾을 수 없었습니다. 에릭이 없는 상태에서는 아무도 그의 전문적인 지식을 대체할 수 없었기 때문에 팀은 큰 혼란에 빠지게 되었습니다.\n\n프로젝트 팀은 에릭의 결석으로 인한 위기를 극복하기 위해 긴급 회의를 열었습니다. 모두가 버스 팩터에 대해 이야기하며, 이 사태로부터 배운 교훈에 대해 논의했습니다. 팀은 이제부터 지식을 공유하고 업무를 분산시키기로 결정했습니다. 각 개발자는 다른 팀원의 역할을 이해하고, 중요한 결정과 지식을 모두가 공유하도록 노력하기로 했습니다.\n\n이제 마을의 개발자들은 에릭 없이도 프로젝트를 진행할 수 있었습니다. 에릭은 멋진 여행을 즐겼지만, 팀은 그의 결석으로 인한 위기를 극복하고 지속 가능한 개발 환경을 조성하는 데 성공했습니다. 그들은 버스 팩터를 기억하며, 이 작은 이야기는 그들에게 프로젝트 관리의 중요성을 상기시켜주었습니다.\n\n---\n\nhttps://www.google.com/search?q=%EB%B2%84%EC%8A%A4%ED%8C%A9%ED%84%B0","collection":"memo","data":{"tags":["terms","버스_팩터"],"status":"release","ctime":"2023-05-28T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"275.md","slug":"275","body":"\n```ts\nimport { match } from 'ts-pattern'\n\ntype Format = 'webp' | 'jpg'\n\ntype Params = {\n  id: string\n  quality: keyof typeof QUALITY_MAP\n  format: Format\n}\n\nconst QUALITY_MAP = {\n  player_background: '0',\n  video_frames_start: '1',\n  video_frames_middle: '2',\n  video_frames_end: '3',\n  lowest_quality: 'default',\n  medium_quality: 'mqdefault',\n  high_quality: 'hqdefault',\n  standard_quality: 'sddefault',\n  unscaled_resolution: 'maxresdefault',\n}\n\nconst BASE_URL = 'https://i.ytimg.com'\n\nconst VI = (format: Format) =>\n  match(format)\n    .with('jpg', () => 'vi')\n    .otherwise(() => ['vi', format].join('_'))\n\nexport function getThumbnail({ id, quality, format }: Params) {\n  return [BASE_URL, VI(format), id, QUALITY_MAP[quality]]\n    .join('/')\n    .concat(`.${format}`)\n}\n```\n\n---\n\n- https://christianheilmann.com/2023/01/11/getting-all-the-video-thumbnails-from-a-youtube-video/","collection":"memo","data":{"tags":["javascript","typescript","ts-pattern"],"status":"release","ctime":"2023-05-29T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"279.md","slug":"279","body":"\n```ts\ntype Props = {\n  popover: 'auto' | 'manual'\n  popovertarget: string\n  popovertargetaction: 'hide' | 'show' | 'toggle'\n}\n\ntype State = {\n  hasBackdrop: boolean\n  isPopoverOpen: boolean\n}\n\ntype Methods = {\n  hidePopover: () => void\n  showPopover: () => void\n  togglePopover: () => void\n}\n\ntype Events = {\n  beforetoggle: () => void\n  toggle: () => void\n}\n```\n\n---\n\n- https://developer.chrome.com/blog/introducing-popover-api/\n- https://developer.mozilla.org/en-US/docs/Web/API/Popover_API","collection":"memo","data":{"tags":["css","ui"],"status":"release","ctime":"2023-06-13T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"28.md","slug":"28","body":"\n- 컴포넌트[^28-2]\n  - calendar\n    - [wojtekmaj/react-calendar](https://github.com/wojtekmaj/react-calendar/tree/fe83e095f0b744ddaf09bb909bf15d9e45054809)\n    - [jquense/react-big-calendar](https://github.com/jquense/react-big-calendar)\n  - date-picker\n    - [GitHub - gpbl/react-day-picker: React DayPicker is a customizable date picker component for React, with native TypeScript support.](https://github.com/gpbl/react-day-picker)\n    - [GitHub - deseretdigital/dayzed: Primitives to build simple, flexible, WAI-ARIA compliant React date-picker components.](https://github.com/deseretdigital/dayzed)\n    - [GitHub - Hacker0x01/react-datepicker: A simple and reusable datepicker component for React](https://github.com/Hacker0x01/react-datepicker/)\n  - headless\n    - [GitHub - its-danny/use-lilius: 📅 A headless calendar hook for React.](https://github.com/its-danny/use-lilius)\n    - [h6s/packages/calendar at main · h6s-dev/h6s · GitHub](https://github.com/h6s-dev/h6s/tree/main/packages/calendar)\n- 그외\n  - [you-dont-need/You-Dont-Need-Momentjs](https://github.com/you-dont-need/You-Dont-Need-Momentjs)[^28-1]\n\n---\n\n[^28-1]: 네이티브로 날짜 계산(?)을 구현하려면 참고\n[^28-2]: headless 모드가 있으면 좋을 것 같은데 찾기 어렵다. 이런게 있다...정도로만 생각하자. 실제 갖다 써보면 뭔말인지 알 수 있을거다.","collection":"memo","data":{"tags":["calendar","ui","date"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"280.md","slug":"280","body":"\n```ts\nimport z from 'zod'\n\nconst envSchema = z.object({\n  REACT_APP_FEATURE_VAC_ASK: z.string(),\n  REACT_APP_FEATURE_RECORDS: z.string(),\n  NODE_ENV: z.enum(['development', 'test', 'production']).default('development'),\n})\n\nconst windowSchema = z.object({\n   SOMETHING_COOL: z.string()\n})\n\nexport const ENV = envSchema.parse(process.env)\nexport const WINDOW = windowSchema.parse(window)\n```\n\n---\n\n- [Using Zod to safely read env variables by sergiodxa](https://sergiodxa.com/articles/using-zod-to-safely-read-env-variables)\n- [GitHub - lostfictions/znv: Type-safe environment parsing and validation for Node.js with Zod schemas](https://github.com/lostfictions/znv)\n- https://twitter.com/mattpocockuk/status/1615110808219918352?s=20","collection":"memo","data":{"tags":["zod"],"status":"release","ctime":"2023-06-14T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"281.md","slug":"281","body":"\n```ts\nenum LogLevel {\n  DEBUG = 'debug',\n  INFO = 'info',\n  WARN = 'warn',\n  ERROR = 'error',\n}\n\ntype Message = string\n\nclass Logger {\n  private level: LogLevel\n\n  constructor(level: LogLevel = LogLevel.DEBUG) {\n    this.level = level\n  }\n\n  private log(level: LogLevel, message: Message) {\n    if (this.level === LogLevel.DEBUG || level !== LogLevel.DEBUG) {\n      const label = level.toUpperCase()\n\n      console.log(`[${label}] ${message}`)\n    }\n  }\n\n  /**\n   * - 개발 혹은 테스트 단계\n   * - 운영 환경에서는 남기고 싶지 않은 로그 메세지\n   */\n  public debug(message: Message) {\n    this.log(LogLevel.DEBUG, message)\n  }\n\n  /**\n   * - 정상 작동에 대한 정보\n   * - 시스템을 파악하는데 유익한 정보\n   */\n  public info(message: Message) {\n    this.log(LogLevel.INFO, message)\n  }\n\n  /**\n   * - 잠재적으로 문제가 될 수 있는 상황\n   * - 언제든 발생할 수 있는 일반적인 문제 상황\n   * - 사용자에게 노출되는 메세지에 상세한 가이드가 필요\n   */\n  public warn(message: Message) {\n    this.log(LogLevel.WARN, message)\n  }\n\n  /**\n   * - 심각한 오류나 예외 상황\n   * - 즉시 조치가 필요할때\n   */\n  public error(message: Message) {\n    this.log(LogLevel.ERROR, message)\n  }\n}\n```\n\n---\n\n[1. 효율적으로 로그 모니터링하기 - 로그 레벨 구분하기](https://jojoldu.tistory.com/712)","collection":"memo","data":{"tags":["debug"],"status":"release","ctime":"2023-06-18T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"287.md","slug":"287","body":"\n```ts\nclass CustomError extends Error {\n  name = 'CustomError'\n\n  constructor(message?: string) {\n    super(message)\n\n    Object.setPrototypeOf(this, CustomError.prototype)\n  }\n}\n\ntry {\n  throw new CustomError('This is a custom error message.')\n} catch (error) {\n  if (error instanceof CustomError) {\n    console.log('CustomError occurred:', error.message)\n    console.log('Error name:', error.name)\n  } else {\n    console.log('An error occurred:', error)\n  }\n}\n```\n\n- https://github.com/Alex-D/check-disk-space/blob/main/src/errors/invalidPathError.ts\n- https://github.com/adriengibrat/ts-custom-error/blob/main/src/custom-error.ts\n- [📘 타입스크립트 커스텀 Error 처리하기](https://inpa.tistory.com/entry/TS-%F0%9F%93%98-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BB%A4%EC%8A%A4%ED%85%80-Error-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0)\n- [Handling errors like a pro in TypeScript | by Kolby Sisk | Udacity Eng & Data](https://engineering.udacity.com/handling-errors-like-a-pro-in-typescript-d7a314ad4991)","collection":"memo","data":{"tags":["error"],"status":"release","ctime":"2023-07-03T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"29.md","slug":"29","body":"\n```js\nimport {\n  addDays,\n  addMonths,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  startOfMonth,\n} from 'date-fns'\n\nconst startOfMonthDate = startOfMonth(new Date())\nconst matrix = eachWeekOfInterval({\n  start: startOfMonthDate,\n  end: addMonths(startOfMonthDate, 1),\n}).map((weekDay) => {\n  const startDate = new Date(weekDay)\n\n  return eachDayOfInterval({\n    start: startDate,\n    end: addDays(startDate, 6),\n  })\n})\n```\n\n- matrix 구현\n  - [bclinkinbeard/calendar-matrix](https://github.com/bclinkinbeard/calendar-matrix)\n  - [Calendar Matrix (date-fns, ES6)](https://gist.github.com/miljan-aleksic/bd70452a3f0cd6a11545db9f6ab57df6)\n- 튜토리얼\n  - [How to Make a Monthly Calendar With Real Data | CSS-Tricks](https://css-tricks.com/how-to-make-a-monthly-calendar-with-real-data)\n  - [Let's Make a Vue-Powered Monthly Calendar | CSS-Tricks](https://css-tricks.com/lets-make-a-vue-powered-monthly-calendar)","collection":"memo","data":{"tags":["calendar","date"],"status":"release","ctime":"2022-11-05T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"295.md","slug":"295","body":"\n`as`로 간단하게 처리가 가능할정도의 복잡도라면 괜찮다고 보는데 더 복잡하게 된다면 `asChild`가 최선의 방법.\n\n```tsx\nfunction Button({ asChild, ...props }) {\n  const Comp = asChild ? Slot : 'button'\n\n  return <Comp {...props} />\n}\n```\n\n---\n\n- https://www.robinwieruch.de/react-as-prop/\n- https://medium.com/@bryanmylee/aschild-in-react-svelte-vue-and-solid-for-render-delegation-645c73650ced\n- https://www.jacobparis.com/content/react-as-child\n","collection":"memo","data":{"tags":["as","asChild"],"status":"release","ctime":"2023-09-20T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"297.md","slug":"297","body":"\n```css\n[data-scope='slider'][data-part='thumb']\n\n[data-scope='slider'][data-part='track']\n\n[data-scope='slider'][data-part='control']\n```\n\n> Ark UI의 각 컴포넌트 파트는 `data-scope` 및 `data-part` 속성으로 지정됩니다. `data-scope` 속성은 컴포넌트를 식별하고, `data-part` 속성은 컴포넌트의 개별 부분을 지정합니다.\n\n[ark-ui](https://ark-ui.com)에서 사용하는 방식인데 적용해볼만한 컨셉이라고 생각한다.\n\n---\n\n- https://ark-ui.com/docs/overview/getting-started\n","collection":"memo","data":{"tags":["ui","ark-ui","component"],"status":"release","ctime":"2023-10-07T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"30.md","slug":"30","body":"\n360 이미지를 드래그해서 회전시키는 기능을 개발할때 3d 리소스를 제공 받을 수 있다면 three.js 같은 라이브러리를 사용해서 쉽게(?) 구현이 가능하다. three.js가 초반 진입 장벽이 높은 것 같지만 단순히 모델 리소스를 보여주는 정도는 배경지식이나 기본지식이 없더라도 어느정도 예제 코드들을 본다면 구현이 가능하다고 본다. 물론 제대로 하고 싶다면 배경지식과 three.js 자체에 대한 학습이 필요.\n\n그런데 부득이하게 여러장으로 된 이미지만 제공 받을 수 있다면 직접 구현해야한다. 그런데 생각보다 드래그 기능을 처음부터 구현한다는게 보통의 개발자들에게는 불편한게 사실이므로 이미 존재하는 플러그인이나 라이브러리를 사용하는게 현실적이다.\n\n그래서 찾아본 gsap의 [Draggable](https://greensock.com/draggable/). 그런데 문서를 보면 다이얼 같이 (뭐라 표현하는게 적당한지 모르겠지만) 직접적으로 드래그 하는 관점의 설명들이 대부분이다. 그런데 360 이미지 같은 경우는 직접적으로 드래그 라기보다는 액션을 빌린 동작이어서 처음에 약간 혼란스러웠는데 좀 더 찾아보니 proxy의 개념을 빌려서 설명된 부분이 있었고 저런식으로 하면 쉽게 [구현](https://codepen.io/eunsoolee/pen/BaZwxoO)이 가능하다.\n\n참고\n\n- [Advanced tutorial: CubeDial, a 3D Carousel made with GSAP - Blog - GreenSock](https://greensock.com/cube-dial-tutorial)\n- https://codepen.io/GreenSock/pen/nHpec/\n- https://codepen.io/GreenSock/pen/LVEXrB\n- https://codepen.io/jamiejefferson/pen/kFhKE/\n\n반대 방향으로 진행시 계산법\n\n- https://codepen.io/GreenSock/pen/b99ec2f21dcd53ecd19c004744b0b6c1\n","collection":"memo","data":{"tags":["gsap","draggable","360","ui"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"300.md","slug":"300","body":"\n로컬에서만 실행 해야하는 프로젝트가 있길래 아무래도 사전설정 같은 귀찮은 문제가 있으니 [pkg](https://github.com/vercel/pkg)를 사용하면 좋을 것 같아서 들어가봤는데 개발이 중단 되었다.\n\n노드 21버젼에서 해당 기능이 지원되는데 재미있는 시도들이 많이 나왔으면 좋겠다.\n\n---\n\n- https://nodejs.org/api/single-executable-applications.html\n- https://github.com/nexe/nexe\n","collection":"memo","data":{"tags":["pkg","node","nexe"],"status":"release","ctime":"2024-04-07T00:00:00.000Z","mtime":"2024-04-07T00:00:00.000Z"}},{"id":"301.md","slug":"301","body":"\n[Astro](https://astro.build/)를 사용한 프로젝트에서 빌드를 하는데 _JavaScript heap out of memory_ 에러가 발생했다.\n쉽게 해결하자면 [`NODE_OPTIONS=--max_old_space_size`(in megabytes)](https://nodejs.org/docs/latest-v20.x/api/cli.html#--max-old-space-sizesize-in-megabytes) 설정해서 우회할수는 있겠지만 정리가 필요해서 메모를 남겨본다.\n일단 원인은 파일사이즈가 크다는 점, 그리고 카테고리(국가)별 데이터가 많다는 점인데 개선할만한 부분은 두가지 정도인 듯.\n\n- 가능한 전처리해서 데이터를 다시 생성해서 참조\n- [`Astro.glob`](https://docs.astro.build/en/guides/imports/#astroglob)을 사용해서 조건부로 데이터를 가져오기\n\n예상치 못한 에러였는데 역시 트레이드오프는 존재하기 마련이다.\n\n---\n\n- https://www.stevefenton.co.uk/blog/2023/07/astro-javascript-heap-out-of-memory/\n","collection":"memo","data":{"tags":["astro","node","memory"],"status":"release","ctime":"2024-04-21T00:00:00.000Z","mtime":"2024-06-06T00:00:00.000Z"}},{"id":"302.md","slug":"302","body":"\n- [Cornerstone.js](https://github.com/cornerstonejs/cornerstone) HTML5 canvas를 지원하는 웹 브라우저에서 가벼운 의료 이미지 표시에 사용되는 JavaScript 라이브러리\n- [OpenSeadragon](https://github.com/openseadragon/openseadragon) 데스크톱 및 모바일에서 사용 가능한 고해상도 줌 가능한 이미지를 위한 순수 JavaScript 뷰어\n- [dicomParser](https://github.com/cornerstonejs/dicomParser) DICOM 파일을 처리하여 의료 이미지 데이터를 JavaScript 객체로 변환하는 라이브러리\n- [AMI Medical Imaging (AMI)](https://github.com/FNNDSC/ami) 웹에서 의료 영상을 효과적으로 표시하고 주석을 추가하는 데 사용되는 JavaScript 라이브러리\n- [OHIF Medical Imaging Viewer](https://github.com/OHIF/Viewers)\n- [itk-wasm](https://github.com/InsightSoftwareConsortium/itk-wasm) 의료 영상 처리를 위한 JavaScript 라이브러리\n- [Brainchop](https://github.com/neuroneural/brainchop)\n\n---\n\n예전에 관련 회사 기술 블로그 보다가 생각나서 찾아본 라이브러리 리스트. 대용량, 의학용 이미지 포멧을 다루기 위한 도구들.\n","collection":"memo","data":{"tags":["zooming","medical-imaging","cornerstone","openseadragon","dicomParser","ami","OHIF","itk-wasm","brainchop"],"status":"release","ctime":"2024-05-16T00:00:00.000Z","mtime":"2024-05-27T00:00:00.000Z"}},{"id":"304.md","slug":"304","body":"\n[chrono](https://github.com/wanasit/chrono)는 다양한 형식의 날짜/시간을 처리하고 주어진 텍스트에서 정보를 추출할 수 있도록 설계된 자연어 날짜 파서.\n\n- \"Today\", \"Tomorrow\", \"Yesterday\", \"Last Friday\" 등의 상대적 날짜 처리\n- \"17 August 2013 - 19 August 2013\"와 같은 날짜 범위 처리\n- \"This Friday from 13:00 - 16.00\"와 같은 시간 포함 날짜 처리\n- \"5 days ago\", \"2 weeks from now\"와 같은 상대적 시간 표현 처리\n- \"Sat Aug 17 2013 18:40:39 GMT+0900 (JST)\"와 같은 표준 날짜 형식 처리\n- \"2014-11-30T08:15:30-05:30\"와 같은 ISO 8601 형식 처리\n\n`parse()`[^304-1][^304-2][^304-3]\n\n```ts\nparse(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n  // 1. 파싱 컨텍스트 생성\n  // 2. 모든 파서를 실행하고 결과 수집\n  // 3. 결과를 인덱스 기준으로 정렬\n  // 4. 모든 리파이너를 적용하여 결과 개선\n  // 5. 최종 결과 반환\n}\n```\n\n[inclusive-dates](https://github.com/fymmot/inclusive-dates)는 자연어 입력을 지원하는 사용자 친화적이고 완전히 접근 가능한 데이트피커. 내부적으로 chrono를 사용하여 자연어 날짜 입력을 처리. 이는 두 라이브러리의 장점을 결합한 좋은 예시.\n\n```tsx\nconst parsedDate = await chronoParseDate(text, {\n  locale: this.locale.slice(0, 2),\n  minDate: this.minDate,\n  maxDate: this.minDate,\n  referenceDate: removeTimezoneOffset(new Date(this.referenceDate)),\n  ...chronoOptions,\n})\n```\n\n1. chrono의 강력한 자연어 날짜 파싱 능력을 활용.\n2. inclusive-dates는 이를 사용자 친화적이고 접근성 높은 UI 컴포넌트로 구현.\n\n이러한 조합을 통해, 개발자들은 사용자에게 직관적이고 유연한 날짜 입력 방식을 제공하면서도 접근성과 사용성을 높일 수 있음.\n\n---\n\n[^304-1]: [executeParser](https://github.com/wanasit/chrono/blob/master/src/chrono.ts#L83)\n[^304-2]: [sort](https://github.com/wanasit/chrono/blob/master/src/chrono.ts#L87)\n[^304-3]: [refine](https://github.com/wanasit/chrono/blob/master/src/chrono.ts#L92)\n","collection":"memo","data":{"title":"자연어 날짜 처리와 접근성 높은 데이트피커 - chrono와 inclusive-dates","description":"chrono와 inclusive-dates 라이브러리를 소개. chrono는 강력한 자연어 날짜 파서이고, inclusive-dates는 이를 활용한 접근성 높은 데이트피커입니다.","tags":["dates","chrono","datepicker","inclusive-dates"],"status":"release","ctime":"2024-06-02T00:00:00.000Z","mtime":"2024-08-09T00:00:00.000Z"}},{"id":"305.md","slug":"305","body":"\n[Google Sheets API](https://developers.google.com/sheets/api/guides/concepts)를 활용하기 위해서는 Google Cloud Platform(GCP)에서 필요한 설정을 하고, [google-spreadsheet](https://github.com/theoephraim/node-google-spreadsheet) 라이브러리를 통해 스프레드시트를 조작할 수 있습니다. 다음은 이를 위한 단계별 가이드입니다.\n\n1. 서비스 계정 설정\n2. [Google Cloud](https://console.cloud.google.com/) 프로젝트 생성\n3. Google Sheets API 활성화\n4. API 자격 증명 생성\n5. 서비스 계정 생성\n6. 서비스 계정 키 생성\n7. 환경 변수 설정\n\n---\n\n- [How To Use Google Sheets as a Database With React via Next.js](https://thenewstack.io/how-to-use-google-sheets-as-a-database-with-react-and-ssr/)\n","collection":"memo","data":{"tags":["google-sheets","google_cloud"],"status":"release","ctime":"2024-06-22T00:00:00.000Z","mtime":"2024-06-22T00:00:00.000Z"}},{"id":"306.md","slug":"306","body":"\nNext.js의 [router-loader.ts](https://github.com/vercel/next.js/blob/16cf88e569552fe5060f1d28a657b749b967528d/packages/next/src/client/route-loader.ts#L121-L150) `#prefetchViaDom()`\n\n```typescript\nfunction prefetchViaDom(\n  href: string,\n  as: string,\n  link?: HTMLLinkElement\n): Promise<any> {\n  return new Promise<void>((resolve, reject) => {\n    const selector = `\n      link[rel=\"prefetch\"][href^=\"${href}\"],\n      link[rel=\"preload\"][href^=\"${href}\"],\n      script[src^=\"${href}\"]`\n    if (document.querySelector(selector)) {\n      return resolve()\n    }\n\n    link = document.createElement('link')\n\n    // The order of property assignment here is intentional:\n    if (as) link!.as = as\n    link!.rel = `prefetch`\n    link!.crossOrigin = process.env.__NEXT_CROSS_ORIGIN!\n    link!.onload = resolve as any\n    link!.onerror = () =>\n      reject(markAssetError(new Error(`Failed to prefetch: ${href}`)))\n\n    // `href` should always be last:\n    link!.href = href\n\n    document.head.appendChild(link)\n  })\n}\n```\n\n이 함수는 미리 가져오는(prefetch) 역할을 하며 주요 특징은 다음과 같다.\n\n- 이미 prefetch 또는 preload된 리소스인지 확인.\n- 새로운 <link> 요소를 생성하여 리소스를 prefetch.\n- 로드 성공 또는 실패 시 적절한 처리.\n\n---\n\nWebpack의 [Mini CSS Extract Plugin](https://github.com/webpack-contrib/mini-css-extract-plugin/blob/3df97b62778fc4586c5198b9f3a447dc65979529/src/index.js#L947C19-L958C22)에서 CSS 청크 로드 실패 시 에러 처리 코드를 볼 수 있다.\n\n```javascript\n Template.indent([\n  \"var errorType = event && event.type;\",\n  \"var realHref = event && event.target && event.target.href || fullhref;\",\n  'var err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\\\n(\" + errorType + \": \" + realHref + \")\");',\n  'err.name = \"ChunkLoadError\";',\n  // TODO remove `code` in the future major release to align with webpack\n  'err.code = \"CSS_CHUNK_LOAD_FAILED\";',\n  \"err.type = errorType;\",\n  \"err.request = realHref;\",\n  \"if (linkTag.parentNode) linkTag.parentNode.removeChild(linkTag)\",\n  \"reject(err);\",\n]),\n```\n\n이 코드는 CSS 청크 로드 실패 시 발생하는 에러를 처리하며 주요 특징은 다음과 같다.\n\n1. 에러 타입과 실제 URL을 파악.\n2. 상세한 에러 메시지를 생성.\n3. 에러 객체에 추가 정보(name, code, type, request)를 설정.\n4. 실패한 `<link>` 태그를 DOM에서 제거.\n5. `Promise`를 `reject`하여 에러를 전파.\n\n이 플러그인은 CSS를 별도의 파일로 추출하는 데 사용되며, 위 코드는 그 과정에서 발생할 수 있는 오류를 처리하는 중요한 부분.\n","collection":"memo","data":{"title":"Next.js의 Route Loader와 Mini CSS Extract Plugin 살펴보기","description":"Next.js와 웹팩(Webpack)의 Mini CSS Extract Plugin에 대한 코드 조각들","tags":["nextjs"],"status":"release","ctime":"2024-06-24T00:00:00.000Z","mtime":"2024-08-07T00:00:00.000Z"}},{"id":"307.md","slug":"307","body":"\n```ts\nif (!data) {\n  throw fetch()\n}\n```\n\n1. 컴포넌트가 렌더링될 때, 비동기 작업(예: 데이터 패칭)이 시작됩니다. 이 작업은 일반적으로 promise를 반환합니다.\n2. 비동기 작업이 완료되지 않은 경우, 컴포넌트는 promise를 던집니다. 이는 JavaScript에서 예외를 던지는 것과 유사합니다. Suspense는 promise가 던져질 때 이를 캐치하고 fallback UI를 표시하는 역할을 합니다.\n3. React는 컴포넌트가 promise를 던졌을 때 이를 감지하고, Suspense 컴포넌트에서 이를 \"캐치\"합니다. Suspense는 이 promise가 해결될 때까지 대체 UI (fallback)를 렌더링합니다. Concurrent Mode에서는 React가 이 promise를 추적하고, 비동기 작업이 완료될 때까지 렌더링을 중단합니다.\n4. Promise가 해결되면(즉, 비동기 작업이 완료되면) React는 컴포넌트를 다시 렌더링합니다. Suspense는 현재 데이터 패칭 라이브러리(예: React Query, SWR)와 함께 사용되어 비동기 작업의 상태를 쉽게 관리할 수 있도록 도와줍니다.\n\n---\n\n- https://github.com/facebook/react/blob/main/packages/react/src/ReactLazy.js#L119C19-L119C26\n- https://github.com/TanStack/query/blob/main/packages/react-query/src/suspense.ts#L62\n- https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/throw\n- https://jser.pro/ddir/rie?reactVersion=18.3.1&codeKey=ud62nsxll29yy0dzba8\n","collection":"memo","data":{"tags":["react","suspense"],"status":"release","ctime":"2024-06-24T00:00:00.000Z","mtime":"2024-06-24T00:00:00.000Z"}},{"id":"308.md","slug":"308","body":"\n전통적인 비즈니스 모델이나 판매 전략을 통해 성장한 기업들이 기술적인 면에서 열등감을 느끼며, 표면적인 변화에 집착하고 기술 도입에 실패하는 등 여러 문제를 겪는다. 이러한 기업들은 기술 전환 과정에서 자주 자원 낭비와 재정 악화를 경험한다. 불필요하거나 과도한 기술 도입 시도는 상당한 자원 낭비를 초래하며, 이는 기업의 재정 상태를 악화시키고 중요한 프로젝트나 핵심 사업에 필요한 자원이 부족해지는 결과를 초래한다.\n\n내부적으로도 갈등과 사기 저하가 발생한다. 기술 전환 과정에서 역할과 책임이 명확히 정의되지 않으면, 직원들 사이에 갈등이 발생하고, 새로운 기술 도입에 대한 교육 부족이나 명확한 비전 부재는 직원들의 사기를 저하시키고 이직률을 높이는 요인이 된다. 이러한 혼란은 결국 고객 이탈을 가속화한다. 기술 도입이 미흡하거나 중단되는 경우, 고객들은 기업의 신뢰성을 의심하게 되고, 특히 디지털 서비스가 부실하면 고객 경험이 악화되어 경쟁사로 이탈하게 된다. 이는 매출 감소로 직결되고 기업의 시장 점유율을 급격히 떨어뜨린다.\n\n경영진의 신뢰 손상도 큰 문제가 된다. 기술 전환의 실패는 경영진의 판단력에 대한 의문을 불러일으키며, 이는 주주들과 투자자들의 신뢰를 흔들리게 하고, 주가 하락과 함께 기업의 시장 가치를 떨어뜨린다. 장기적인 재무 안정성에도 부정적인 영향을 미친다. 또한, 잘못된 기술 도입으로 인해 기업이 기술에 지나치게 의존하게 되면 본래의 영업 중심 모델이 약화되고, 기술적 문제가 발생할 때마다 더 큰 리스크에 노출된다.\n\n이 과정에서 혁신 저해가 일어난다. 무분별한 기술 도입이 오히려 조직의 혁신 문화를 저해하고, 기술 도입이 실패로 끝날 경우 조직 내에서는 새로운 시도를 꺼리게 되어 전체적인 혁신 역량이 저하된다. 결과적으로 기업은 변화하는 시장 환경에 적응하지 못하게 된다. 이러한 실패와 고객 신뢰 상실은 장기적으로 회복 불가능한 손실을 초래한다. 브랜드 이미지가 심각하게 손상되고, 시장에서의 입지가 약화되어 재도약이 어려워진다.\n\n이와 같은 부정적인 결과는 영업 중심의 기업들이 기술적 역량을 무리하게 키우려 할 때 나타나는 전형적인 문제들이다. 이러한 함정에 빠지지 않기 위해서는, 기술 도입에 있어 신중하고 체계적인 접근이 필요하며, 기존의 강점을 유지하면서 기술을 보완하는 전략을 세워야 한다. 기술적 열등감을 극복하려는 시도가 오히려 기업의 몰락을 초래할 수 있음을 인지하고, 보다 현실적이고 균형 잡힌 접근을 해야 한다.\n","collection":"memo","data":{"tags":["잡담"],"status":"release","ctime":"2024-06-30T00:00:00.000Z","mtime":"2024-06-30T00:00:00.000Z"}},{"id":"309.md","slug":"309","body":"\n최근에 [Enzyme](https://github.com/enzymejs/enzyme)을 제거하고 [React Testing Library](https://github.com/testing-library/react-testing-library)로 교체하는 작업을 진행했습니다. [JSX](https://facebook.github.io/jsx/) 영역은 별 문제 없이 진행되었으나, state나 props를 다루는 구현 부분에서 약간의 애매함이 있었습니다. 개인적으로는 기존 접근 방식이 나쁘지 않았다고 생각했기 때문에, 새로운 접근 방식으로 전환하는 데 주저하게 되었습니다.\n\n결론적으로, state와 props의 JSON 결과물을 렌더링하고 [getByTestId](https://testing-library.com/docs/queries/bytestid/)를 사용하여 이를 참조하는 방식으로 테스트를 진행하기로 했습니다. 다음은 그 예시입니다:\n\n```tsx\nrender() {\n  return <>\n    {process.env.NODE_ENV === 'test' && (\n      <pre data-testid=\"ThumbnailDebug\">\n        {JSON.stringify({\n          props: this.props,\n          state: this.state,\n        })}\n      </pre>\n    )}\n  </>\n}\n```\n\n이 방법을 통해 Enzyme을 제거한다는 목표를 달성했기 때문에, 어느 정도는 해결된 것처럼 보이며, 추후 더 나은 테스트 코드를 작성하기 위한 고민을 할 수 있을 것 같습니다.\n","collection":"memo","data":{"tags":["enzyme","test","react-testing-library"],"status":"release","ctime":"2024-07-11T00:00:00.000Z","mtime":"2024-07-11T00:00:00.000Z"}},{"id":"310.md","slug":"310","body":"\nReact 애플리케이션에서 라우팅은 중요한 부분. 특히, 사용자가 링크를 클릭할 때 적절한 페이지로 이동하는지 테스트하는 것은 중요. 다음은 [React Router](https://reactrouter.com/en/main)의 `<Link />` 컴포넌트를 테스트하는 코드.\n\n```tsx\ndescribe('Link', () => {\n  it('이동', () => {\n    const Home = () => <Link to=\"/about\">About</Link>\n    const About = () => <h1>About</h1>\n\n    const { getByRole } = render(\n      <MemoryRouter initialEntries={['/']}>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n        </Routes>\n      </MemoryRouter>\n    )\n\n    fireEvent.click(getByRole('link'))\n\n    expect(screen.getByRole('heading')).toHaveTextContent('About')\n  })\n})\n```\n\n가끔 `<Link />`도 테스트해야 할 때가 있다. 위 코드는 사용자가 \"About\" 링크를 클릭하면 \"About\" 페이지로 이동하는지 테스트. fireEvent.click을 사용해 링크 클릭 이벤트를 발생시키고, screen.getByRole을 통해 헤딩 요소의 텍스트가 'About'인지 확인. 이 테스트를 통해 라우팅이 제대로 동작하는지 확인할 수 있음.\n\n---\n\n- https://github.com/remix-run/react-router/blob/main/packages/react-router-dom/__tests__/link-click-test.tsx\n","collection":"memo","data":{"title":"React Router의 Link 컴포넌트 테스트하기","description":"이 글에서는 React Router의 <Link /> 컴포넌트를 테스트하는 방법을 설명합니다. 사용자가 링크를 클릭하면 적절한 페이지로 이동하는지 확인하는 테스트 코드를 예제와 함께 제공합니다.","tags":["test","react-router"],"status":"release","ctime":"2024-08-06T00:00:00.000Z","mtime":"2024-08-06T00:00:00.000Z"}},{"id":"36.md","slug":"36","body":"\n```js\nfunction toggleReducer(state, action) {\n  switch (action.type) {\n    default:\n      return state\n  }\n}\n\nfunction useToggle({ reducer = toggleReducer } = {}) {\n  const [state, dispatch] = useReducer(reducer, {})\n  return { state, dispatch }\n}\n\nexport function Component() {\n  useToggle({\n    reducer(currentState, action) {\n      console.log(currentState, action)\n    },\n  })\n}\n```\n\n`useReducer`를 이용한 커스텀훅 사용에 대한 간단한 예시. 생각해보니 reducer를 전달해서 재사용하는 방법은 잘 생각못했는데 응용할 수 있을 것 같다.\n\n---\n\n- [The State Reducer Pattern with React Hooks](https://kentcdodds.com/blog/the-state-reducer-pattern-with-react-hooks)[^36-1]\n\n---\n\n[^36-1]: 리듀서를 사용하여 예측 가능하고 테스트 가능한 방식으로 상태 업데이트 및 작업을 캡슐화하는 방법과 State Reducer 패턴을 사용하여 이를 사용하는 구성 요소에서 상태 업데이트를 추상화하여 해당 구성 요소가 특정 기능에 더 집중하도록 만드는 방법을 설명.","collection":"memo","data":{"tags":["react","useReducer"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"38.md","slug":"38","body":"\n[google-optimize](https://github.com/jaredLunde/react-hook/tree/master/packages/google-optimize)\n\n- [#L19-L24](https://github.com/jaredLunde/react-hook/blob/master/packages/google-optimize/src/index.tsx#L19-L24)[^38-1]\n- [#L46](https://github.com/jaredLunde/react-hook/blob/master/packages/google-optimize/src/index.tsx#L46)[^38-2]\n- [#L8](https://github.com/jaredLunde/react-hook/blob/master/packages/google-optimize/src/index.tsx#L8)[^38-3]\n\n---\n\n[^38-1]: `setTimeout`, `clearTimeout` 으로 최적화\n[^38-2]: `gtag` 에서도 `remove: true`값 전달로 해제\n[^38-3]: `variants`를 컴포넌트로 전달 받아서 리턴","collection":"memo","data":{"tags":["optimize"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"4.md","slug":"4","body":"\n- 캔버스로 동영상 프레임을 캡쳐한다. \n- 텍스트를 입력 받는다. 해당 텍스트를 서버에 보내고 음성파일을 응답받는다. \n  - `Blob`데이터는 `URL.createObjectURL()`로 변환해서 `img`, `audio` 태그에 연결한다.\n\n---\n\n- [[JS] Blob와 Blob URL - 코드쓰는사람](https://taegon.kim/archives/5078)\n- [Handle Blobs requests with Axios the right way | by Marios Fakiolas | Medium](https://medium.com/@fakiolinho/handle-blobs-requests-with-axios-the-right-way-bb905bdb1c04)\n- [Blob(블랍) 이해하기 | HEROPY](https://heropy.blog/2019/02/28/blob/)\n- [File API 정리하기. 최근 FileReader 를 사용할 일이 생겨 File API 를 정리… | by 박성룡 ( Andrew park ) | Medium](https://pks2974.medium.com/file-api-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0-729fa6a3a0ba)","collection":"memo","data":{"tags":["blob","javascript","file","axios"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"46.md","slug":"46","body":"\n- [Using Composition in React to Avoid \"Prop Drilling\"](https://youtu.be/3XaXKiXtNjw)[^46-1]\n- [Merrick Christensen - Headless User Interface Components](https://www.merrickchristensen.com/articles/headless-user-interface-components/)[^46-2]\n\n---\n\n- 유연성: 정책을 메커니즘에서 분리하고 인터페이스를 엔진에서 분리하면 소프트웨어 구성 요소를 설계하고 구현할 때 더 큰 유연성을 확보할 수 있습니다. 따라서 시스템의 나머지 부분에 영향을 주지 않고 구성 요소를 수정하거나 교체하기가 더 쉬워집니다.\n- 재사용 가능성: 컴포넌트를 별개의 모듈로 분리하면 다양한 컨텍스트나 애플리케이션에서 사용할 수 있는 재사용 가능한 빌딩 블록을 만들 수 있습니다. 이를 통해 코드 재사용을 촉진하여 개발 시간을 단축하고 코드 품질을 개선할 수 있습니다.\n- 테스트 가능성: 메커니즘을 정책에서 분리하고 인터페이스를 엔진에서 분리하면 개별 구성 요소를 개별적으로 테스트하기가 더 쉬워져 전반적인 테스트 범위가 개선되고 버그나 회귀의 위험이 줄어듭니다.\n- 유지 관리 가능성: 컴포넌트를 별개의 모듈로 분리하면 시간이 지남에 따라 코드를 더 쉽게 유지 관리하고 디버그할 수 있습니다. 또한 시스템의 나머지 부분에 영향을 주지 않고 개별 컴포넌트의 문제나 버그를 더 쉽게 식별하고 수정할 수 있습니다.\n- 확장성: 컴포넌트를 분리하면 특정 요구 사항에 따라 여러 컴포넌트를 독립적으로 확장할 수 있어 소프트웨어 애플리케이션을 더 쉽게 확장할 수 있습니다.\n- 상호 운용성: 구성 요소를 분리하면 서로 다른 시스템 간에 통신하는 데 사용할 수 있는 잘 정의되고 표준화된 인터페이스를 생성하여 서로 다른 시스템 또는 구성 요소 간의 상호 운용성을 향상시킬 수 있습니다.\n- 민첩성: 컴포넌트를 분리하면 나머지 시스템에 영향을 주지 않고 개별 컴포넌트를 더 빠르게 반복하고 변경할 수 있어 민첩성을 향상시킬 수 있습니다.\n\n---\n\n[^46-1]: React에서 컴포지션의 개념과 \"Prop Drilling\"을 피하기 위해 React에서 사용하는 방법을 설명.\n[^46-2]: Headless UI 컴포넌트의 개념을 소개. 헤드리스 UI 컴포넌트가 무엇인지, 기존 UI 컴포넌트와 어떻게 다른지 설명하고, 다양한 프로그래밍 언어와 프레임워크에서 헤드리스 UI 컴포넌트를 구현하는 방법에 대한 예제.","collection":"memo","data":{"tags":["composition","react"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"47.md","slug":"47","body":"\n[No, disabling a button is not app logic. - DEV Community](https://dev.to/davidkpiano/no-disabling-a-button-is-not-app-logic-598i)\n\n```md\n- \"idle\" 아무 것도 아직 일어나지 않았다.\n- \"loading\" 진행중\n- \"success\" 성공적\n- \"failure\" 오류가 발생했음\n```","collection":"memo","data":{"tags":["state","ui"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"48.md","slug":"48","body":"\n[How To Maintain A Large Next.js Application — Smashing Magazine](https://www.smashingmagazine.com/2021/11/maintain-large-nextjs-application/)\n\n- TypeScript 사용\n- Lerna , Nx , Rush , Turborepo , yarn workspaces를 사용하여 Mono-Repo 구조 사용\n- Hygen과 같은 코드 생성기를 사용하여 상용구 코드 생성\n- Redux 툴킷을 통해 하위 상용구와 함께 Redux와 같이 잘 설정된 패턴 사용\n- 비동기 데이터를 가져오기 위해 React 쿼리 또는 SWR 사용\n- Husky와 함께 Commitizen 및 Semantic Release 사용\n- UI 구성 요소 시각화를 위해 스토리북 사용\n- 처음부터 유지 관리 가능한 테스트 작성\n- Dependabot을 사용하여 자동으로 패키지 업데이트\n- [Going to Production | Next.js](https://nextjs.org/docs/going-to-production)","collection":"memo","data":{"tags":["react","next","monorepo","hygen","husky","dependabot"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"49.md","slug":"49","body":"\n[Advanced Features: Static HTML Export | Next.js](https://nextjs.org/docs/advanced-features/static-html-export)\n\n```shell\nnext export\n```\n\n앱의 HTML 버전을 빌드. `.out` 디렉토리에 빌드된 페이지 파일을 복사합니다.","collection":"memo","data":{"tags":["next","static"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"5.md","slug":"5","body":"\n- [The Complete Guide to JavaScript Classes](https://dmitripavlutin.com/javascript-classes-complete-guide/)[^5-1]\n- [The Flavors of Object-Oriented Programming (in JavaScript) | CSS-Tricks](https://css-tricks.com/the-flavors-of-object-oriented-programming-in-javascript/)[^5-2]\n\n---\n\n[^5-1]: 클래스에 대한 구문, 메서드, 속성, 상속 등에 대한 포괄적인 설명\n[^5-2]: 클래스, 프로토타입 및 팩토리 함수 사용과 같이 객체 지향 프로그래밍을 구현하는 다양한 접근 방식을 설명과 각 접근 방식의 예와 장단점들","collection":"memo","data":{"tags":["javascript","class"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://stackblitz.com/edit/js-wq8lqn?file=index.js"}},{"id":"51.md","slug":"51","body":"\n```json\n{\n  \"tailwindcss\": \"tailwindcss -i ./src/index.css -o ./src/tailwind.css\",\n  \"start\": \"concurrently \\\"yarn tailwindcss --watch\\\"\",\n  \"prebuild\": \"yarn tailwindcss --minify\",\n}\n```\n\ncreate-react-app 구형버젼(+eject)에서 설치할 경우 연관된 부분이 많아서 차라리 cli를 사용하는게 편한 상황. 그런데 [`concurrently`](https://github.com/open-cli-tools/concurrently#readme)[^51-1]로 프로세스를 동시에 실행시켜야 되는 부분이 있다.\n\n---\n\n[^51-1]: https://tailwindcss.com/docs/tailwind-cli","collection":"memo","data":{"tags":["tailwindcss","create-react-app"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"52.md","slug":"52","body":"\n- [XMLHttpRequestEventTarget.onprogress](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress)[^52-1]\n- [ReadableStream - Web API | MDN](https://developer.mozilla.org/ko/docs/Web/API/ReadableStream)[^52-2]\n- [Request Config - onUploadProgress](https://github.com/axios/axios#request-config)[^52-3]\n\n---\n\n[^52-1]: XMLHttpRequest가 완전히 성공할때까지 정보를 주기적으로 호출하는 함수\n[^52-2]: `fetch` 에서는  `ReadableStream`, `Response` 조합으로 구현 가능\n[^52-3]: axios 에서는 `onUploadProgress` 콜백(`progressEvent`)으로 구현","collection":"memo","data":{"tags":["fetch","onprogress"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"53.md","slug":"53","body":"\n- [조건](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests)에 따라서 브라우저에서 자동으로 발생[^53-1]\n- OPTIONS 메서드로 요청\n- cloudfront에 OPTIONS 메서드 설정이 안되어 있다면 실패[^53-2]\n\n---\n\n[^53-1]: [단순 요청(Simple requests)](https://developer.mozilla.org/ko/docs/Web/HTTP/CORS#%EB%8B%A8%EC%88%9C_%EC%9A%94%EC%B2%ADsimple_requests)\n[^53-2]: [CloudFront 배포의 캐시 동작이 HTTP 요청에 대한 OPTIONS 메서드를 허용함](https://aws.amazon.com/ko/premiumsupport/knowledge-center/no-access-control-allow-origin-error/)","collection":"memo","data":{"tags":["fetch","preflight","simple_requests"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"55.md","slug":"55","body":"\n```js\nconst formData = new FormData();\nconst single = document.querySelector('input[type=\"file\"]');\nconst multiple = document.querySelector('input[type=\"file\"][multiple]');\n\nformData.append('single', single.files[0]);\n\n[...multiple].forEach((file, index) => {\n  formData.append(`multiple_${index}`, file);\n})\n\nfetch('https://example.com/posts', {\n  method: 'POST',\n  body: formData,\n})\n```","collection":"memo","data":{"tags":["fetch","formdata"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"56.md","slug":"56","body":"\nPromise를 거부할 때 객체 를 사용하도록 강제 합니다.[^56-1]\n\n```js\n// ❌\nPromise.reject('An error occurred');\n\n// ✅\nPromise.reject(new Error('An error occurred'));\n```\n\n항상 [Error객체](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error)로 [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)를 거부하는 것이 가장 좋습니다. 이렇게 하면 오류 개체가 스택 추적을 저장하기 때문에 오류가 발생한 위치를 더 쉽게 추적할 수 있습니다.\n\n---\n\n[^56-1]: [14 Linting Rules To Help You Write Asynchronous Code in JavaScript - Maxim Orlov](https://maximorlov.com/linting-rules-for-asynchronous-code-in-javascript/)","collection":"memo","data":{"tags":["promise","javascript"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"58.md","slug":"58","body":"\n[imagemin](https://github.com/imagemin/imagemin)을 사용하려고 하는데 [module](https://nodejs.org/api/esm.html)로 라이브러리가 업데이트 되어서 찾아본 내용. 혼란스러운 부분도 있지만 성숙해지는 과정이라고 본다.\n\n- [Pure ESM package · GitHub](https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c)\n- [Get Ready For ESM. JavaScript Modules will soon be a… | by Sindre Sorhus | 🦄 Sindre Sorhus’ blog](https://blog.sindresorhus.com/get-ready-for-esm-aa53530b3f77)\n- [Hello, Modules!. JavaScript Modules, also known as ESM… | by Sindre Sorhus | 🦄 Sindre Sorhus’ blog](https://blog.sindresorhus.com/hello-modules-d1010b4e777b)\n- [Publish ESM and CJS in a single package](https://antfu.me/posts/publish-esm-and-cjs)[^58-1]\n\n---\n\n[^58-1]: [esm](https://nodejs.org/api/esm.html#modules-ecmascript-modules) 배경과 [tsup](https://tsup.egoist.dev/), [unbuild](https://github.com/unjs/unbuild) 라는 두개의 해결방법을 소개해주고 있다.","collection":"memo","data":{"tags":["esm","node"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"59.md","slug":"59","body":"\n이미지 다운로드 구현. 이미지 응답값을 buffer로 변환해서 파일쓰기로 저장한다.\n\n```js\nconst fs = require('fs')\nconst util = require('util')\nconst fetch = require('node-fetch')\n\nconst writeFile = util.promisify(fs.writeFile)\nconst mkdir = util.promisify(fs.mkdir)\n\nconst FOLDER_PATH = 'FOLDER_PATH'\n\nasync function download({ url }) {\n  const response = await fetch(url)\n  const buffer = Buffer.from(await response.arrayBuffer())\n\n  if (!fs.existsSync(FOLDER_PATH)) {\n    await mkdir(FOLDER_PATH)\n  }\n\n  await writeFile(url, buffer)\n}\n```","collection":"memo","data":{"tags":["node","buffer","fs","fetch"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"6.md","slug":"6","body":"\n- [How to Modify Nodes in an Abstract Syntax Tree | CSS-Tricks](https://css-tricks.com/how-to-modify-nodes-in-an-abstract-syntax-tree/)[^6-1]\n- [AST for JavaScript developers. TL;DR This article is my talk for… | by Bohdan Liashenko | ITNEXT](https://itnext.io/ast-for-javascript-developers-3e79aeb08343)[^6-2]\n- [GitHub - NV/CSSOM: Unmaintained! ⚠️ CSS Object Model implemented in pure JavaScript. Also, a CSS parser.](https://github.com/NV/CSSOM)[^6-3]\n- [GitHub - csstree/csstree: A tool set for CSS including fast detailed parser, walker, generator and lexer based on W3C specs and browser implementations](https://github.com/csstree/csstree)\n\n---\n\n[^6-1]: markdown을 [unified](https://unifiedjs.com/)를 이용해서 파싱하고 html로 변환. (플러그인 기능을 추가해서 `img`->`figcaption` 기능 추가)\n[^6-2]: AST가 무엇이며 일반 코드에서 어떻게 구축 하는지에 대한 설명과 기반으로 하는 사용 사례와 프로젝트 소개\n[^6-3]: css 데이터 조작이 필요한 [경우](https://yy644.csb.app/)가 있어서 찾아봤다. 예를들어 특정 속성값만 추출해서 유닛값은 제거 한다든가.","collection":"memo","data":{"tags":["ast","parser","unified","css","javascript"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"60.md","slug":"60","body":"\n```js\nimport sharp from 'sharp'\nimport fg from 'fast-glob'\n\nconst entries = await fg('./**/*.png')\n\nfor (const entry of entries) {\n  const trimmedBuffer = await sharp(entry).trim().toBuffer()\n  const trimmedImage = sharp(trimmedBuffer)\n  const trimmedMetadata = await trimmedImage.metadata()\n\n  trimmedImage\n    .resize({\n      width: Math.round(trimmedMetadata.width / 2),\n      height: Math.round(trimmedMetadata.height / 2),\n    })\n    .png()\n    .toFile('output.png')\n}\n```\n\noffset(top, left)값, 이미지 사이즈 설정으로 crop 구현이 가능하다\n\n```js\nsharp('img.png')\n  .extract({\n    left: 50,\n    top: 50, \n    width: 200, \n    height: 400\n  })\n```\n\n---\n\n- [resize](https://sharp.pixelplumbing.com/api-resize#resize)\n- [extract](https://sharp.pixelplumbing.com/api-resize#extract)","collection":"memo","data":{"tags":["node","sharp","image"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"62.md","slug":"62","body":"\n- [yarn upgrade-interactive | Yarn](https://classic.yarnpkg.com/lang/en/docs/cli/upgrade-interactive/#toc-yarn-upgrade-interactive)[^62-1]\n- [Find newer versions of package dependencies than what your package.json allows](https://github.com/raineorshine/npm-check-updates)[^62-2]\n\n---\n\n[^62-1]: 이 명령은 업그레이드를 수행하기 전에 오래된 패키지를 표시하여 사용자가 업그레이드할 패키지를 선택할 수 있도록 합니다.\n[^62-2]: [npm-check-updates](https://github.com/raineorshine/npm-check-updates)는 지정된 버전을 무시하고 [package.json](https://docs.npmjs.com/files/package.json/) 종속성을 최신 버전으로 업그레이드합니다 .","collection":"memo","data":{"tags":["node","yarn","package"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"63.md","slug":"63","body":"\n- 이미지 압축 기본 설정값 참조: mozjpeg(75), pngquant([75, 85])[^63-1]\n\n---\n\n[^63-1]: https://github.com/antonreshetov/image-optimizer/blob/master/src/main/store/module/app.js#L32-L53","collection":"memo","data":{"tags":["node","image","imagemin"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"64.md","slug":"64","body":"\nCSV와는 다르다! CSV와는!\n\n```js\nconst fs = require('fs')\nconst XLSX = require('xlsx')\n\nconst buf = fs.readFileSync('developer_labels_20181221.xlsx')\nconst workbook = XLSX.read(buf, { type: 'buffer' })\n\nconst roa = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], {\n  header: 1,\n})\n\nconst result = roa\n  .slice(1)\n  .map((item) => item.slice(1, 4))\n  .filter((item) => item.some(Boolean))\n  .reduce(\n    (p, n) => {\n      const [key, en, ko] = n\n      const newKey = key.toLowerCase().replace(/\\-/g, '_')\n\n      p['en'][newKey] = en\n      p['ko'][newKey] = ko\n\n      return p\n    },\n    { en: {}, ko: {} }\n  )\n\nfs.writeFileSync('en.json', JSON.stringify(result.en), 'utf8')\nfs.writeFileSync('ko.json', JSON.stringify(result.ko), 'utf8')\n```\n\n---\n\n- [sheetjs](https://docs.sheetjs.com/docs/)","collection":"memo","data":{"tags":["node","xlsx","excel"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"65.md","slug":"65","body":"\n```json\n// package.json 파일에 로컬 경로를 지정하는 방법. 파일 시스템에 있는 패키지 디렉터리를 사용할 수 있음.\n\n{\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n```\n\n---\n\n- [package.json | npm Docs](https://docs.npmjs.com/cli/v7/configuring-npm/package-json#local-paths)","collection":"memo","data":{"tags":["node","npm","package"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"66.md","slug":"66","body":"\n- [Monorepo Explained](https://monorepo.tools/)\n- [Monorepos are changing how teams build software – Vercel](https://vercel.com/blog/monorepos-are-changing-how-teams-build-software)\n\n\n```\n# 특정 패키지에 모듈을 설치해야한다면\nyarn workspace <workspace_name> <command>\n```","collection":"memo","data":{"tags":["node","monorepo","yarn"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"68.md","slug":"68","body":"\n[localtunnel](https://github.com/localtunnel/localtunnel)은 쉽게 테스트하고 공유할 수 있도록 로컬 호스트를 공개합니다! 다른 사람들이 변경 사항을 테스트하도록 하기 위해 DNS를 엉망으로 만들거나 배포할 필요가 없습니다.\n\n```js\napp.listen(PORT, async () => {\n  const tunnel = await localtunnel({\n    port: PORT,\n    subdomain: name,\n  })\n```\n\n> 하지만 너무 느려서 ngrok 쓰는게 현실적일수도 있겠다. -20220917\n\n- [awesome-tunneling](https://github.com/anderspitman/awesome-tunneling)\n- [cloudflared](https://github.com/cloudflare/cloudflared)\n- [ngrok](https://ngrok.com/)\n","collection":"memo","data":{"tags":["local","debug","tunneling","localtunnel","ngrok","cloudflared"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2025-06-02T00:00:00.000Z"}},{"id":"69.md","slug":"69","body":"\ncharles\n\n- [The Android Emulator and Charles Proxy: A Love Story | by Mark Dappollone | Medium](https://medium.com/@daptronic/the-android-emulator-and-charles-proxy-a-love-story-595c23484e02)\n- [Is it possible to rewrite a status code with Charles Proxy? - Stack Overflow](https://stackoverflow.com/questions/14360125/is-it-possible-to-rewrite-a-status-code-with-charles-proxy)\n\nfiddler\n\n- [Web Performance Calendar » Fiddler AutoResponder](https://calendar.perfplanet.com/2019/fiddler-autoresponder/)[^69-1]\n\nmitmproxy\n\n- [mitmproxy로 iOS 기기의 네트워크 트래픽 살펴보기 :: Outsider's Dev Story](https://blog.outsider.ne.kr/1514)\n- [Android nougat 이상 emulator에서 mitmproxy 사용하기 | by Jungwook Park | kjcoop | Medium](https://medium.com/kjcoop/android-nougat-%EC%9D%B4%EC%83%81-emulator%EC%97%90%EC%84%9C-mitmproxy-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-98003008f78d)\n\n---\n\n[^69-1]: AutoResponder기능을 어떻게 활용 가능한지 알려주는 내용. [delay](https://docs.telerik.com/fiddler/knowledge-base/autoresponder#delay) 추가로 응답 시간 조절이 가능하므로 font, script 로딩 시간을 늘려서 시각적으로 확인이 가능하다.","collection":"memo","data":{"tags":["local","charles","debug"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"7.md","slug":"7","body":"\n[Designing a JavaScript Plugin System | CSS-Tricks](https://css-tricks.com/designing-a-javascript-plugin-system/)[^7-1]\n\n---\n\n[^7-1]: 플러그인은 라이브러리와 프레임워크의 공통 기능이며 개발자가 안전하고 확장 가능한 방식으로 기능을 추가할 수 있도록 한다. 그래서 추가 유지 관리 부담이 없다.","collection":"memo","data":{"tags":["plugin","javascript"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://stackblitz.com/edit/js-xjtc7p?file=index.js"}},{"id":"70.md","slug":"70","body":"\n서비스워커로 [fetch](https://developer.mozilla.org/ko/docs/Web/API/FetchEvent)를 감지해서 해당 기능을 구현한다는 내용.\n개인적으로는 mock은 간단하게 구현 가능할 것 같은데 이미 같은 기능의 잘 만들어진 라이브러리들이 있으니까 아이디어 정도로 생각하면 될 것 같다.\n\n```js\naddEventListener('fetch', e => { \n  // e.request\n  // e.respondWith\n})\n```\n\n- [How To Run a Proxy Server Inside Your Browser | by Danny Moerkerke | Better Programming](https://betterprogramming.pub/how-to-run-a-proxy-server-inside-your-browser-8b96ea2ef1ea)\n- [MSW – Seamless API mocking library for browser and Node | Mock Service Worker](https://mswjs.io/)","collection":"memo","data":{"tags":["fetch","service_worker","mock","msw"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"72.md","slug":"72","body":"\n서버/프론트 구분이 없는 환경일 경우 옜날에는 이렇게 세팅해서 개발\n\n```js\nconst bs = require('browser-sync').create()\n\nbs.init({\n  port: 8081,\n  https: false,\n  proxy: 'http://localhost:8080',\n  serveStatic: [\n    {\n      route: '/resources',\n      dir: 'src/main/webapp/resources',\n    },\n  ],\n  files: 'src/main/webapp/resources/**/*',\n  open: false,\n})\n```","collection":"memo","data":{"tags":["local"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"74.md","slug":"74","body":"\n```shell\nextractFrames() {\n  ffmpeg -i $1 -vf fps=30 output_frame_%d.png\n}\n\n# $1 = frames로 사용될 파일들\n# $2 = output 파일\n# Example: concatFrames ./frame_%5d.png output.webm\nconcatFrames() {\n  ffmpeg -framerate 30 -i $1 -c:v libvpx-vp9 -pix_fmt yuva420p $2\n}\n\n# $1 = frame로 사용될 파일\n# $2 = output 파일\n# Example: frameToVideo frame.jpg output.mp4\nframeToVideo() {\n  ffmpeg -loop 1 -i $1 -c:v libx264 -t 10 -pix_fmt yuv420p $2\n}\n\n# $1 = 인코딩할 영상 video.mp4\n# $2 = output 파일명\nencodingVideo() {\n  ffmpeg -an -i $1 -vcodec libx264 -pix_fmt yuv420p -profile:v baseline -level 3 \"${$2}.mp4\"\n  ffmpeg -i \"${$2}.mp4\" -vcodec libvpx-vp9 -b:v 1M -acodec libvorbis \"${$2}.webm\"\n}\n```\n\n---\n\n- [Encoding Video\n](https://gist.github.com/Vestride/278e13915894821e1d6f)","collection":"memo","data":{"tags":["ffmpeg","video"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"75.md","slug":"75","body":"\n```\n# /home/USERNAME/.zshrc\n\nHOME=\"/mnt/c/Users/cbcru\"\nDL=\"$HOME/Downloads\"\n\nif [[ $PWD == $HOME ]]; then\n    cd $DL\nfi\n```","collection":"memo","data":{"tags":["zsh","dotfiles","shell"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"77.md","slug":"77","body":"\n- [혜택](https://content.zigzag.kr/benefit)은 웹뷰로 존재함\n- GraphQL을 사용 중\n\n```js\nuseSWR(\n  `{\n    pages {\n      user_group\n      highlight_color\n      page_list {\n        type\n        page_id\n        page_name\n        is_new\n      }\n    }\n  }`,\n  (query) => request('https://api.zigzag.kr/api/2/graphql', query)\n)\n```","collection":"memo","data":{"tags":["api"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"78.md","slug":"78","body":"\n> 검색기능을 정말 간단하게 구현하고 싶을때:\n> 프로그래밍 가능한 검색 엔진을 사용하면 웹사이트, 블로그 또는 웹사이트 모음에 대한 검색 엔진을 만들 수 있습니다. 웹 페이지와 이미지를 모두 검색하도록 엔진을 구성할 수 있습니다. 순위를 미세 조정하고 자신의 프로모션을 추가하고 검색 결과의 모양과 느낌을 사용자 지정할 수 있습니다. 엔진을 Google 애드센스 계정에 연결하여 검색으로 수익을 창출할 수 있습니다.\n\n---\n\n- [Method: cse.siterestrict.list](https://developers.google.com/custom-search/v1/reference/rest/v1/cse.siterestrict/list)\n- [cbcruk/cse-events](https://github.com/cbcruk/cse-events)","collection":"memo","data":{"tags":["cse","api"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"79.md","slug":"79","body":"\n- [Use the Notion API to Create a Quiz with JavaScript - SitePoint](https://www.sitepoint.com/notion-api-javascript-quiz/)\n- [Collecting Email Signups With the Notion API | CSS-Tricks](https://css-tricks.com/collecting-email-signups-with-the-notion-api/)\n\n---\n\n1. [통합(integration)](https://www.notion.com/my-integrations)을 생성합니다.[^79-1]\n2. 통합과 데이터베이스 공유\n  2.1 `•••` -> `Add connections`\n\n---\n\n[^79-1]: https://developers.notion.com/docs","collection":"memo","data":{"tags":["api","notion","docs"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"8.md","slug":"8","body":"\n[Quick tip: reusable Array search predicates - JASON Format](https://jasonformat.com/reusable-array-search-predicates/)\n\n```js\narr.filter(callback(element[, index[, array]])[, thisArg])\n```\n\n배열 메서드에서 2번째 인자 `thisArg`에 참조값을 전달해서 재사용 가능한 함수를 만드는 트릭. 단 성능 이슈가 있으므로 주의해야 한다.","collection":"memo","data":{"tags":["javascript","array"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z","embed":"https://stackblitz.com/edit/node-zbv5x8?file=package.json&view=editor"}},{"id":"83.md","slug":"83","body":"\n- [Objects - GitHub Docs](https://docs.github.com/en/graphql/reference/objects)[^83-1]\n  - [repository](https://docs.github.com/en/graphql/reference/objects#repository)\n  - [issue](https://docs.github.com/en/graphql/reference/objects#issue)\n- [GitHub Next | Flat Data](https://githubnext.com/projects/flat-data#part-iii-visualizing-our-data-for-easy-sharing-optional)[^83-2]\n  - [GitHub - githubocto/flat-demo-google-sheets: A Flat Data GitHub Action demo repo](https://github.com/githubocto/flat-demo-google-sheets)\n  - [GitHub - mathiasbynens/covid-19-vaccinations-germany: Historical data on COVID-19 vaccination doses administered in Germany, per state.](https://github.com/mathiasbynens/covid-19-vaccinations-germany)\n- [GitHub Code Search (Preview)](https://cs.github.com/)[^83-3][^83-4]\n\n---\n\n[^83-1]: GitHub GraphQL API를 통해 쿼리할 수 있는 다양한 개체에 대한 개요.\n[^83-2]: GitHub에서 플랫 데이터를 사용하는 방법에 대한 튜토리얼. 플랫 데이터는 개발자가 API 또는 CSV 파일과 같은 다양한 소스의 데이터를 GitHub 리포지토리로 쉽게 가져올 수 있는 기능입니다. 이 자습서에서는 GitHub Actions와 함께 플랫 데이터를 사용하여 다양한 소스에서 데이터 가져오기를 자동화하는 방법과 가져온 데이터를 사용하여 시각화 및 대화형 웹 애플리케이션을 만드는 방법을 다룹니다. 또한 플랫 데이터를 사용하는 방법을 보여주는 예제 프로젝트에 대한 링크를 제공합니다. 여기에는 Google 스프레드시트를 사용한 플랫 데이터 데모 저장소와 독일의 코로나19 백신 접종 기록 데이터가 포함된 저장소가 포함됩니다.\n[^83-3]: 사용자가 GitHub의 공개 리포지토리 내에서 코드 조각을 검색할 수 있는 GitHub 코드 검색에 대한 링크입니다. 다른 개발자의 코드를 빠르게 찾고 탐색할 수 있는 방법을 제공하며 새로운 라이브러리, 프레임워크 및 모범 사례를 찾는 데 사용할 수 있습니다. 검색 결과는 리포지토리, 언어, 파일 유형 및 기타 기준으로 필터링할 수 있으며 관련성, 별 또는 분기별로 정렬할 수 있습니다.\n[^83-4]: https://grep.app/","collection":"memo","data":{"tags":["api","github"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"84.md","slug":"84","body":"\n[Cool Cats: The Coolest NFT's on the Blockchain!](https://www.coolcatsnft.com/gallery)\n\n```js\nconst imageSrc = `https://s3.amazonaws.com/api.coolcatsnft.com/thumbnails/${ID}_thumbnail.png`\nconst query = {\n  sortBy: 'token_id_asc',\n  limit: 48,\n  page: 1,\n  face: 'angry',\n  hats: 'admiral',\n  shirt: 'astro',\n  tier: 'cool_1',\n}\n\nfetch('https://prod-api.coolcatsnft.com/cat?sortBy=token_id_asc&limit=48&page=1&tier=${tier}')\n```\n\n\n| key | values | \n|---|---|\n|face | angry, angry cute, angry scar, beard brown, beard pirate, beard tan, derp, ditto, dizzy, double face, face face, glasses, glasses funny, glossy, grin, happy, happy cute, hearts, mononoke, mummy, ninja black, ninja blue, ninja red, owo, pixel, rich, shocked, smirk, stunned, sunglasses blue, sunglasses cool, sunglasses cowboy, sunglasses heart, sunglasses pixel, sunglasses squad, sunglasses yellow, three eyes, tired, tvface 404, tvface bobross, tvface nosignal, tvface xp, unamused, uwu, wink, zombie|\n|hat | admiral, admiral pink, afro black, afro brown, afro rainbow unicorn, antlers, apple, arrowhead, astro, astro cheeks, astro fishbowl, beanie black, beanie blue, beanie orange, beanie red, beret black, beret green, beret pink, beret red, bow, bucket hat blue, bucket hat green, bucket hat tan, bucket hat white, candle, costume dragon, costume frog, costume gorilla, cowboy black, cowboy brown, crown black, crown fire, crown gold, cupcake, deepsea bronze, deepsea orange, dutch, flower blue, flower pink, flower red, goggles seaweed, halo, halo fire, hat black, hat skull, hat visor blue, hat visor yellow, hat white, headband blue, headband red, helm army, helm biker, helm bronze, helm silver, horns, knight black, knight blue, knight red, mohawk green, mohawk purple, mohawk red, mullet blonde, mullet brown, ninja black, ninja blue, ninja red, nurse, piercings, pirate black, pirate red, prince, sunhat black, sunhat tan, sunhat white, sushi, top hat, tvhead grey, tvhead purple, tvhead white, unicorn horn, visor green, visor purple, wreath, wreath flowers|\n|shirt | astro, astro black, astro orange, bandana green, bandana purple, bandana red, baseball blue, baseball red, buttondown black flannel, buttondown blue flannel, buttondown green, buttondown red flannel, buttondown tan, chain, combat black, combat green, costume dragon, costume frog, costume gorilla, costume hotdog, cowboy black, cowboy brown, deepsea bronze, deepsea orange, epaulette black, epaulette red, epaulette white, gown black, gown purple, gown white, hoodie black, hoodie purple, hoodie red, knight, knight black, knight leather, labcoat, lederhosen, monk, mononoke, ninja black, ninja blue, ninja red, nurse, overalls blue, overalls flannel, overalls pink, overalls red, overalls yellow, pirate black, pirate red, punk, robe blue, robe king, robe red, robe white, shirt bowtie, shirt white, shirt yellow, sweater black, sweater green chain, sweater orange, sweater pink, tanktop orange, tanktop pink, tanktop sailor black, tanktop sailor blue, tanktop sailor red, tanktop tattoo, tanktop white, tiger, toga, tshirt blue, tshirt green, tshirt metal, tshirt pink, tshirt red, tshirt white, tshirt yellow, viking brown, viking navy, wetsuit, winter blue, winter red, work blue, work red|\n|tier | cool_1, cool_2, wild_1, wild_2, classy_1, classy_2, exotic_1, exotic_2|","collection":"memo","data":{"tags":["api"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"85.md","slug":"85","body":"\n```js\nfunction getReverseGeocodeData() {\n  const response = Maps.newGeocoder()\n    .setLanguage('ko')\n    .reverseGeocode(40.758577, -73.984464)\n\n  return response.results.map((result) => {\n    return {\n      formatted_address: result.formatted_address,\n      lat: result.geometry.location.lat,\n      lng: result.geometry.location.lng,\n    }\n  })\n}\n```\n\n- [`reverseGeocode(latitude, longitude)`](<https://developers.google.com/apps-script/reference/maps/geocoder#reverseGeocode(Number,Number)>)\n- [`setLanguage(language)`](https://developers.google.com/apps-script/reference/maps/geocoder#setlanguagelanguage)\n","collection":"memo","data":{"tags":["google_apps_script","geolocation","newGeocoder"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"87.md","slug":"87","body":"\nhash 링크로 연결될 경우 스크롤위치가 최상단으로 위치하기 때문에 문제(헤더가 고정일 경우)가 있을수도 있어서 `scroll-margin-top`으로 제어가 가능한 부분을 설명하고 있다.\n\n- [Add scroll margin to all elements which can be targeted - Piccalilli](https://piccalil.li/quick-tip/add-scroll-margin-to-all-elements-which-can-be-targeted/)[^87-1]\n- [Fixed Headers and Jump Links? The Solution is scroll-margin-top | CSS-Tricks](https://css-tricks.com/fixed-headers-and-jump-links-the-solution-is-scroll-margin-top/)\n- [Prevent content from being hidden underneath a fixed header by using scroll-margin-top – Bram.us](https://www.bram.us/2020/03/01/prevent-content-from-being-hidden-underneath-a-fixed-header-by-using-scroll-margin-top/)\n\n---\n\n[^87-1]: `2ex` 유닛을 사용하여 선택한 글꼴의 x 높이의 상대적인 크기로 설정.","collection":"memo","data":{"tags":["scroll","css"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"91.md","slug":"91","body":"\nhttpOnly, secure 플래그 쿠키값이 필요한 경우 CDPSession 실행 후 클라이언트와 [통신](https://chromedevtools.github.io/devtools-protocol/tot/Network/#method-getAllCookies)한다.\n```js\nconst client = await page.target().createCDPSession()\nconst data = await client.send('Network.getAllCookies')\n```\n\n로컬에 해당 쿠키정보를 임시로 저장해서 재활용하고 만료 시 갱신하는 방법을 사용.\n```js\nfs.writeFileSync('cookies.json', JSON.stringify(data))\n\nconst { cookies } = JSON.parse(fs.readFileSync('cookies.json', 'utf8'))\nawait page.setCookie(...cookies)\n```","collection":"memo","data":{"tags":["puppeteer","cookies"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"92.md","slug":"92","body":"\n`setExtraHTTPHeaders` 호출하기\n```js\nawait page.setExtraHTTPHeaders(headers)\n```\n\n인터셉트로 가로채기\n```js\nawait page.setRequestInterception(true)\n\npage.on('request', (request) => {\n  const headers = {\n    ...request.headers()\n  }\n\n  interceptedRequest({ headers })\n})\n```","collection":"memo","data":{"tags":["puppeteer","headers"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"93.md","slug":"93","body":"\n이미지 저장[^93-1]\n\n- 페이지에서 JavaScript를 통해 이미지 추출\n  - 캔버스에서 이미지 추출\n  - 서버에서 이미지 가져오기\n- DevTools 프로토콜을 사용하여 이미지 추출\n\n[^93-1]: [Saving Images from a Headless Browser](https://intoli.com/blog/saving-images/)\n\n```js\nconst tree = await page._client.send('Page.getResourceTree')\n\nfor (const resource of tree.frameTree.resources) {\n  const { content } = await page._client.send(\n    'Page.getResourceContent',\n    { frameId: String(page.mainFrame()._id), url: resource.url },\n  )\n  const contentBuffer = Buffer.from(content, 'base64')\n}\n```\n\n```js\npage.on('response', async (response) => {\n  const url = response.url()\n  const buffer = await response.buffer()\n})\n```","collection":"memo","data":{"tags":["puppeteer","image"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"96.md","slug":"96","body":"\nhomebrew, brew[^96-1]\n\n```shell\nbrew bundle dump\nbrew bundle\n```\n\n- [My 2021 New Mac Setup - DEV Community](https://dev.to/swyx/my-2021-new-mac-setup-1b1)\n- [Homebrew 로 Mac 한 방에 셋업하기](https://blog.gangnamunni.com/post/brew_cask_mas/)\n\n---\n\n[^96-1]: https://gist.github.com/cbcruk/b417d085163bb7d7244dd1815885b8cb","collection":"memo","data":{"tags":["brew"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}},{"id":"97.md","slug":"97","body":"\n[Using Slack Slash Commands to Send Data from Slack into Google Sheets](https://davidwalsh.name/using-slack-slash-commands-to-send-data-from-slack-into-google-sheets)\n\n1. 사람들이 추천한 책을 기록한다\n2. 슬랙 -> 구글시트\n3. 슬랙 커맨드 설정 `/book` + 구글앱스 스크립트 url 연결[^97-1]\n4. POST로 전송 받은 데이터값을 기반으로 데이터 처리 완료\n\n---\n\n[^97-1]: [꿀벌개발일지 :: 구글 앱스 스크립트에서 비동기 작업 추가하기](https://ohgyun.com/806) doPost에서 비동기 처리 ","collection":"memo","data":{"tags":["google_apps_script","slack"],"status":"release","ctime":"2022-04-09T00:00:00.000Z","mtime":"2024-03-22T00:00:00.000Z"}}]